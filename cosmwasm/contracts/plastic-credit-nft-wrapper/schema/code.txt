empowerd tx wasm instantiate 1 '{"minter": "empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw", "name": "Plastic Credit NFT", "symbol": "PCRD"}' --label nft --admin empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw --from validator --gas auto --gas-prices 0.025umpwr --gas-adjustment 1.75 --yes --chain-id emp-devnet-1


empowerd tx wasm execute empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu '{"mint":{"token_id": "1", "owner": "empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw", "token_uri": "www.example.com"}}' --from validator --yes --chain-id emp-devnet-1

empowerd q wasm contract-state smart empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu '{"nft_info":{"token_id": "1"}}'


empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw


akub Kobeldys14:48
Asdasdasd1
Jakub Kobeldys14:50
passw0rd
Jakub Kobeldys14:54
~
Jakub Kobeldys14:58
empowerd tx wasm store $WASM_FILE --from validator --gas auto --gas-prices 0.025umpwr --gas-adjustment 1.75 --yes --output json | jq -r ".txhash"
Jakub Kobeldys15:05
empowerd tx wasm instantiate $CODE_ID '{"admin": "empower18hl5c9xn5dze2g50uaw0l2mr02ew57zkk9vga7", "fee_percentage": "0", "shares": []}' --label marketplace --admin empower18hl5c9xn5dze2g50uaw0l2mr02ew57zkk9vga7 --from alice --gas auto --gas-prices 0.025umpwr --gas-adjustment 1.75 --yes
Jakub Kobeldys15:15
empowerd tx wasm execute empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu '{"create_listing":{"denom": "ETEST/1002", "number_of_credits": "100", "price_per_credit": {"denom": "umpwr", "amount": "10000000"}}}' --from applicant --yes
Jakub Kobeldys15:53
echo "Asdasdasd1" | empowerd tx pc grant-transfer-authz empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu ETEST/1001 1000 --from applicant --yes
sleep 5
echo "Asdasdasd1" | empowerd tx wasm execute empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu '{"create_listing":{"denom": "ETEST/1001", "number_of_credits": "100", "price_per_credit": {"denom": "umpwr", "amount": "10000000"}}}' --from applicant --yes



vaquish@vaquish-XPS-15-9500:~$ docker ps 
CONTAINER ID   IMAGE                                                 COMMAND                  CREATED          STATUS                             PORTS                                                     NAMES
93d0e0e584ba   ghcr.io/empowerplastic/empowerchain-devnet:74df5f1a   "/bin/sh -c 'empower…"   24 seconds ago   Up 23 seconds                      1317/tcp, 9090/tcp, 26656/tcp, 0.0.0.0:26657->26657/tcp   unruffled_benz
d58930ded2e7   earthly/buildkitd:v0.7.21                             "/usr/bin/entrypoint…"   4 hours ago      Up 4 hours                         127.0.0.1:8371->8371/tcp                                  earthly-buildkitd
566d1131d3a9   onfinality/subql-query:latest                         "/sbin/tini -- bin/r…"   4 weeks ago      Restarting (1) 55 seconds ago                                                                indexer_graphql-engine_1
23bd0ded15f4   onfinality/subql-node-cosmos:latest                   "/sbin/tini -- /usr/…"   4 weeks ago      Up 17 seconds (health: starting)                                                             indexer_subquery-node_1
vaquish@vaquish-XPS-15-9500:~$ ^C
vaquish@vaquish-XPS-15-9500:~$ docker exec -it 93d0e0e584ba /bin/sh
# ls
bin   dev  go	 lib	lib64	media  opt   root  sbin  sys  usr
boot  etc  home  lib32	libx32	mnt    proc  run   srv	 tmp  var
# cd root
# cd /root           
# pwd
/root
# ls -a
.  ..  .bashrc	.empowerchain  .profile
# cat .empowerchain/config/genesis.json
{
  "genesis_time": "2023-03-01T12:14:43.646173978Z",
  "chain_id": "emp-devnet-1",
  "initial_height": "1",
  "consensus_params": {
    "block": {
      "max_bytes": "22020096",
      "max_gas": "-1"
    },
    "evidence": {
      "max_age_num_blocks": "100000",
      "max_age_duration": "172800000000000",
      "max_bytes": "1048576"
    },
    "validator": {
      "pub_key_types": [
        "ed25519"
      ]
    },
    "version": {
      "app": "0"
    }
  },
  "validators": [],
  "app_hash": "",
  "app_state": {
    "auth": {
      "params": {
        "max_memo_characters": "256",
        "tx_sig_limit": "7",
        "tx_size_cost_per_byte": "10",
        "sig_verify_cost_ed25519": "590",
        "sig_verify_cost_secp256k1": "1000"
      },
      "accounts": [
        {
          "@type": "/cosmos.auth.v1beta1.BaseAccount",
          "address": "empower1qnk2n4nlkpw9xfqntladh74w6ujtulwnz7rf8m",
          "pub_key": null,
          "account_number": "0",
          "sequence": "0"
        },
        {
          "@type": "/cosmos.auth.v1beta1.BaseAccount",
          "address": "empower18hl5c9xn5dze2g50uaw0l2mr02ew57zkk9vga7",
          "pub_key": null,
          "account_number": "0",
          "sequence": "0"
        },
        {
          "@type": "/cosmos.auth.v1beta1.BaseAccount",
          "address": "empower18s4hq5tn3yp9jphlastrgdgx5da6uk4882pjym",
          "pub_key": null,
          "account_number": "0",
          "sequence": "0"
        },
        {
          "@type": "/cosmos.auth.v1beta1.BaseAccount",
          "address": "empower1m9l358xunhhwds0568za49mzhvuxx9uxl4sqxn",
          "pub_key": null,
          "account_number": "0",
          "sequence": "0"
        },
        {
          "@type": "/cosmos.auth.v1beta1.BaseAccount",
          "address": "empower15hxwswcmmkasaar65n3vkmp6skurvtas3xzl7s",
          "pub_key": null,
          "account_number": "0",
          "sequence": "0"
        },
        {
          "@type": "/cosmos.auth.v1beta1.BaseAccount",
          "address": "empower1reurz37gn2sk3vgr3fupcultkagzverqczer0l",
          "pub_key": null,
          "account_number": "0",
          "sequence": "0"
        },
        {
          "@type": "/cosmos.auth.v1beta1.BaseAccount",
          "address": "empower1xgsaene8aqfknmldemvl5q0mtgcgjv9svupqwu",
          "pub_key": null,
          "account_number": "0",
          "sequence": "0"
        },
        {
          "@type": "/cosmos.auth.v1beta1.BaseAccount",
          "address": "empower13f4qk3p6hu52e3ccsctecjrzqx9sqhc89uprnu",
          "pub_key": null,
          "account_number": "0",
          "sequence": "0"
        },
        {
          "@type": "/cosmos.auth.v1beta1.BaseAccount",
          "address": "empower1myvqq5t0d65zkwf906sxflwz40fnjxa29zrafn",
          "pub_key": null,
          "account_number": "0",
          "sequence": "0"
        },
        {
          "@type": "/cosmos.auth.v1beta1.BaseAccount",
          "address": "empower10meawsx9u3lkl2p6amk87k6tye6qn6dkqx2ksj",
          "pub_key": null,
          "account_number": "0",
          "sequence": "0"
        },
        {
          "@type": "/cosmos.auth.v1beta1.BaseAccount",
          "address": "empower1defgz460qy5jvkfvuz5qe0spelykpndewq2f0d",
          "pub_key": null,
          "account_number": "0",
          "sequence": "0"
        },
        {
          "@type": "/cosmos.auth.v1beta1.BaseAccount",
          "address": "empower18ejln3k0xhds5apdgjdnyytmkw74jsgy3xxrlu",
          "pub_key": null,
          "account_number": "0",
          "sequence": "0"
        },
        {
          "@type": "/cosmos.auth.v1beta1.BaseAccount",
          "address": "empower1zg453l326xgrk5nm2prru4teqkym8zc94wrcrw",
          "pub_key": null,
          "account_number": "0",
          "sequence": "0"
        },
        {
          "@type": "/cosmos.auth.v1beta1.BaseAccount",
          "address": "empower15ee5hstfe6sje9am9ngxas5xhqgdqafns9zlmk",
          "pub_key": null,
          "account_number": "0",
          "sequence": "0"
        },
        {
          "@type": "/cosmos.auth.v1beta1.BaseAccount",
          "address": "empower1yaqhrv5xn7qkprg3xlsdl884edhp3ypruy87vx",
          "pub_key": null,
          "account_number": "0",
          "sequence": "0"
        },
        {
          "@type": "/cosmos.auth.v1beta1.BaseAccount",
          "address": "empower15tsyfjljsafh0rlarrwqa5x2z80n08se895vzs",
          "pub_key": null,
          "account_number": "0",
          "sequence": "0"
        },
        {
          "@type": "/cosmos.auth.v1beta1.BaseAccount",
          "address": "empower17ejywmeqlae3ncyqs6nlfweeg6gl30qn0zvmje",
          "pub_key": null,
          "account_number": "0",
          "sequence": "0"
        },
        {
          "@type": "/cosmos.auth.v1beta1.ModuleAccount",
          "base_account": {
            "address": "empower1fl48vsnmsdzcv85q5d2q4z5ajdha8yu3fhdyrf",
            "pub_key": null,
            "account_number": "0",
            "sequence": "0"
          },
          "name": "bonded_tokens_pool",
          "permissions": [
            "burner",
            "staking"
          ]
        },
        {
          "@type": "/cosmos.auth.v1beta1.ModuleAccount",
          "base_account": {
            "address": "empower1tygms3xhhs3yv487phx3dw4a95jn7t7lah344a",
            "pub_key": null,
            "account_number": "0",
            "sequence": "0"
          },
          "name": "not_bonded_tokens_pool",
          "permissions": [
            "burner",
            "staking"
          ]
        },
        {
          "@type": "/cosmos.auth.v1beta1.BaseAccount",
          "address": "empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw",
          "pub_key": null,
          "account_number": "0",
          "sequence": "0"
        }
      ]
    },
    "authz": {
      "authorization": [
        {
          "granter": "empower1qnk2n4nlkpw9xfqntladh74w6ujtulwnz7rf8m",
          "grantee": "empower15tsyfjljsafh0rlarrwqa5x2z80n08se895vzs",
          "authorization": {
            "@type": "/cosmos.authz.v1beta1.GenericAuthorization",
            "msg": "/empowerchain.plasticcredit.MsgApproveProject"
          },
          "expiration": null
        },
        {
          "granter": "empower1qnk2n4nlkpw9xfqntladh74w6ujtulwnz7rf8m",
          "grantee": "empower15tsyfjljsafh0rlarrwqa5x2z80n08se895vzs",
          "authorization": {
            "@type": "/cosmos.authz.v1beta1.GenericAuthorization",
            "msg": "/empowerchain.plasticcredit.MsgIssueCredits"
          },
          "expiration": null
        },
        {
          "granter": "empower1qnk2n4nlkpw9xfqntladh74w6ujtulwnz7rf8m",
          "grantee": "empower15tsyfjljsafh0rlarrwqa5x2z80n08se895vzs",
          "authorization": {
            "@type": "/cosmos.authz.v1beta1.GenericAuthorization",
            "msg": "/empowerchain.plasticcredit.MsgRejectProject"
          },
          "expiration": null
        },
        {
          "granter": "empower1qnk2n4nlkpw9xfqntladh74w6ujtulwnz7rf8m",
          "grantee": "empower15tsyfjljsafh0rlarrwqa5x2z80n08se895vzs",
          "authorization": {
            "@type": "/cosmos.authz.v1beta1.GenericAuthorization",
            "msg": "/empowerchain.plasticcredit.MsgSuspendProject"
          },
          "expiration": null
        }
      ]
    },
    "bank": {
      "params": {
        "send_enabled": [],
        "default_send_enabled": true
      },
      "balances": [
        {
          "address": "empower1qnk2n4nlkpw9xfqntladh74w6ujtulwnz7rf8m",
          "coins": [
            {
              "denom": "umpwr",
              "amount": "500000000"
            }
          ]
        },
        {
          "address": "empower18hl5c9xn5dze2g50uaw0l2mr02ew57zkk9vga7",
          "coins": [
            {
              "denom": "umpwr",
              "amount": "500000000"
            }
          ]
        },
        {
          "address": "empower18s4hq5tn3yp9jphlastrgdgx5da6uk4882pjym",
          "coins": [
            {
              "denom": "umpwr",
              "amount": "500000000"
            }
          ]
        },
        {
          "address": "empower1m9l358xunhhwds0568za49mzhvuxx9uxl4sqxn",
          "coins": [
            {
              "denom": "umpwr",
              "amount": "500000000"
            }
          ]
        },
        {
          "address": "empower15hxwswcmmkasaar65n3vkmp6skurvtas3xzl7s",
          "coins": [
            {
              "denom": "umpwr",
              "amount": "500000000"
            }
          ]
        },
        {
          "address": "empower1reurz37gn2sk3vgr3fupcultkagzverqczer0l",
          "coins": [
            {
              "denom": "umpwr",
              "amount": "500000000"
            }
          ]
        },
        {
          "address": "empower1xgsaene8aqfknmldemvl5q0mtgcgjv9svupqwu",
          "coins": [
            {
              "denom": "umpwr",
              "amount": "10"
            }
          ]
        },
        {
          "address": "empower13f4qk3p6hu52e3ccsctecjrzqx9sqhc89uprnu",
          "coins": [
            {
              "denom": "umpwr",
              "amount": "1000000000000"
            }
          ]
        },
        {
          "address": "empower1fl48vsnmsdzcv85q5d2q4z5ajdha8yu3fhdyrf",
          "coins": [
            {
              "denom": "umpwr",
              "amount": "900000000000"
            }
          ]
        },
        {
          "address": "empower1myvqq5t0d65zkwf906sxflwz40fnjxa29zrafn",
          "coins": [
            {
              "denom": "umpwr",
              "amount": "900000000000"
            }
          ]
        },
        {
          "address": "empower10meawsx9u3lkl2p6amk87k6tye6qn6dkqx2ksj",
          "coins": [
            {
              "denom": "umpwr",
              "amount": "900000000000"
            }
          ]
        },
        {
          "address": "empower1defgz460qy5jvkfvuz5qe0spelykpndewq2f0d",
          "coins": [
            {
              "denom": "umpwr",
              "amount": "900000000000"
            }
          ]
        },
        {
          "address": "empower18ejln3k0xhds5apdgjdnyytmkw74jsgy3xxrlu",
          "coins": [
            {
              "denom": "umpwr",
              "amount": "900000000000"
            }
          ]
        },
        {
          "address": "empower1zg453l326xgrk5nm2prru4teqkym8zc94wrcrw",
          "coins": [
            {
              "denom": "umpwr",
              "amount": "900000000000"
            }
          ]
        },
        {
          "address": "empower15ee5hstfe6sje9am9ngxas5xhqgdqafns9zlmk",
          "coins": [
            {
              "denom": "umpwr",
              "amount": "900000000000"
            }
          ]
        },
        {
          "address": "empower1yaqhrv5xn7qkprg3xlsdl884edhp3ypruy87vx",
          "coins": [
            {
              "denom": "umpwr",
              "amount": "900000000000"
            }
          ]
        },
        {
          "address": "empower15tsyfjljsafh0rlarrwqa5x2z80n08se895vzs",
          "coins": [
            {
              "denom": "umpwr",
              "amount": "900000000000"
            }
          ]
        },
        {
          "address": "empower17ejywmeqlae3ncyqs6nlfweeg6gl30qn0zvmje",
          "coins": [
            {
              "denom": "umpwr",
              "amount": "900000000000"
            }
          ]
        },
        {
          "address": "empower1tygms3xhhs3yv487phx3dw4a95jn7t7lah344a",
          "coins": []
        },
        {
          "address": "empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw",
          "coins": [
            {
              "denom": "umpwr",
              "amount": "1000000000000"
            }
          ]
        }
      ],
      "supply": [
        {
          "denom": "umpwr",
          "amount": "11003000000010"
        }
      ],
      "denom_metadata": [],
      "send_enabled": []
    },
    "capability": {
      "index": "1",
      "owners": []
    },
    "certificates": {
      "params": {
        "allowed_issuers": [
          "empower1xgsaene8aqfknmldemvl5q0mtgcgjv9svupqwu"
        ]
      },
      "id_counters": {
        "next_certificate_id": 2
      },
      "certificates": [
        {
          "id": 1,
          "owner": "empower1qnk2n4nlkpw9xfqntladh74w6ujtulwnz7rf8m",
          "type": 0,
          "issuer": "empower1xgsaene8aqfknmldemvl5q0mtgcgjv9svupqwu"
        }
      ]
    },
    "consensus": null,
    "crisis": {
      "constant_fee": {
        "denom": "stake",
        "amount": "1000"
      }
    },
    "distribution": {
      "params": {
        "community_tax": "0.020000000000000000",
        "base_proposer_reward": "0.000000000000000000",
        "bonus_proposer_reward": "0.000000000000000000",
        "withdraw_addr_enabled": true
      },
      "fee_pool": {
        "community_pool": []
      },
      "delegator_withdraw_infos": [],
      "previous_proposer": "empowervalcons1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfd4aaq6",
      "outstanding_rewards": [
        {
          "validator_address": "empowervaloper1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfexwpvm",
          "outstanding_rewards": []
        }
      ],
      "validator_accumulated_commissions": [
        {
          "validator_address": "empowervaloper1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfexwpvm",
          "accumulated": {
            "commission": []
          }
        }
      ],
      "validator_historical_rewards": [
        {
          "validator_address": "empowervaloper1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfexwpvm",
          "period": "0",
          "rewards": {
            "cumulative_reward_ratio": [],
            "reference_count": 2
          }
        }
      ],
      "validator_current_rewards": [
        {
          "validator_address": "empowervaloper1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfexwpvm",
          "rewards": {
            "rewards": [],
            "period": "1"
          }
        }
      ],
      "delegator_starting_infos": [
        {
          "delegator_address": "empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw",
          "validator_address": "empowervaloper1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfexwpvm",
          "starting_info": {
            "previous_period": "1",
            "stake": "900000000000.000000000000000000",
            "height": "0"
          }
        }
      ],
      "validator_slash_events": []
    },
    "evidence": {
      "evidence": []
    },
    "feegrant": {
      "allowances": []
    },
    "feeibc": {
      "identified_fees": [],
      "fee_enabled_channels": [],
      "registered_payees": [],
      "registered_counterparty_payees": [],
      "forward_relayers": []
    },
    "genutil": {
      "gen_txs": []
    },
    "gov": {
      "starting_proposal_id": "1",
      "deposits": [],
      "votes": [],
      "proposals": [],
      "deposit_params": null,
      "voting_params": null,
      "tally_params": null,
      "params": {
        "min_deposit": [
          {
            "denom": "stake",
            "amount": "10000000"
          }
        ],
        "max_deposit_period": "172800s",
        "voting_period": "172800s",
        "quorum": "0.334000000000000000",
        "threshold": "0.500000000000000000",
        "veto_threshold": "0.334000000000000000",
        "min_initial_deposit_ratio": "0.000000000000000000",
        "burn_vote_quorum": false,
        "burn_proposal_deposit_prevote": false,
        "burn_vote_veto": false
      }
    },
    "group": {
      "group_seq": "0",
      "groups": [],
      "group_members": [],
      "group_policy_seq": "0",
      "group_policies": [],
      "proposal_seq": "0",
      "proposals": [],
      "votes": []
    },
    "ibc": {
      "client_genesis": {
        "clients": [],
        "clients_consensus": [],
        "clients_metadata": [],
        "params": {
          "allowed_clients": [
            "06-solomachine",
            "07-tendermint",
            "09-localhost"
          ]
        },
        "create_localhost": false,
        "next_client_sequence": "0"
      },
      "connection_genesis": {
        "connections": [],
        "client_connection_paths": [],
        "next_connection_sequence": "0",
        "params": {
          "max_expected_time_per_block": "30000000000"
        }
      },
      "channel_genesis": {
        "channels": [],
        "acknowledgements": [],
        "commitments": [],
        "receipts": [],
        "send_sequences": [],
        "recv_sequences": [],
        "ack_sequences": [],
        "next_channel_sequence": "0"
      }
    },
    "interchainaccounts": {
      "controller_genesis_state": {
        "active_channels": [],
        "interchain_accounts": [],
        "ports": [],
        "params": {
          "controller_enabled": true
        }
      },
      "host_genesis_state": {
        "active_channels": [],
        "interchain_accounts": [],
        "port": "icahost",
        "params": {
          "host_enabled": true,
          "allow_messages": [
            "*"
          ]
        }
      }
    },
    "mint": {
      "minter": {
        "inflation": "0.130000000000000000",
        "annual_provisions": "0.000000000000000000"
      },
      "params": {
        "mint_denom": "stake",
        "inflation_rate_change": "0.130000000000000000",
        "inflation_max": "0.200000000000000000",
        "inflation_min": "0.070000000000000000",
        "goal_bonded": "0.670000000000000000",
        "blocks_per_year": "6311520"
      }
    },
    "params": null,
    "plasticcredit": {
      "params": {
        "issuer_creator": "",
        "credit_type_creation_fee": {
          "denom": "mpwr",
          "amount": "50"
        }
      },
      "id_counters": {
        "next_issuer_id": "4",
        "next_applicant_id": "4",
        "next_project_id": "12"
      },
      "issuers": [
        {
          "id": "1",
          "name": "Empower",
          "description": "First Issuer",
          "admin": "empower1qnk2n4nlkpw9xfqntladh74w6ujtulwnz7rf8m"
        },
        {
          "id": "2",
          "name": "Test Issuer",
          "description": "Purely for testing",
          "admin": "empower1qnk2n4nlkpw9xfqntladh74w6ujtulwnz7rf8m"
        },
        {
          "id": "3",
          "name": "Test Issuer with no coins",
          "description": "Purely for testing",
          "admin": "empower1xgsaene8aqfknmldemvl5q0mtgcgjv9svupqwu"
        }
      ],
      "applicants": [
        {
          "id": "1",
          "name": "Plastix Inc.",
          "description": "Grab that bottle",
          "admin": "empower18s4hq5tn3yp9jphlastrgdgx5da6uk4882pjym"
        },
        {
          "id": "2",
          "name": "Ocean plastic Inc.",
          "description": "Grab that net",
          "admin": "empower18s4hq5tn3yp9jphlastrgdgx5da6uk4882pjym"
        },
        {
          "id": "3",
          "name": "Sea plastic Inc.",
          "description": "collector",
          "admin": "empower18s4hq5tn3yp9jphlastrgdgx5da6uk4882pjym"
        }
      ],
      "credit_types": [
        {
          "abbreviation": "ETEST",
          "issuer_id": "1",
          "name": "Empower Plastic"
        },
        {
          "abbreviation": "PTEST",
          "issuer_id": "2",
          "name": "Plastic Credit"
        }
      ],
      "projects": [
        {
          "id": "1",
          "applicant_id": "1",
          "credit_type_abbreviation": "ETEST",
          "name": "Approved project",
          "status": "APPROVED"
        },
        {
          "id": "2",
          "applicant_id": "1",
          "credit_type_abbreviation": "PTEST",
          "name": "Suspended project",
          "status": "SUSPENDED"
        },
        {
          "id": "3",
          "applicant_id": "1",
          "credit_type_abbreviation": "ETEST",
          "name": "New project",
          "status": "NEW"
        },
        {
          "id": "4",
          "applicant_id": "1",
          "credit_type_abbreviation": "PTEST",
          "name": "Rejected project",
          "status": "REJECTED"
        },
        {
          "id": "5",
          "applicant_id": "1",
          "credit_type_abbreviation": "PTEST",
          "name": "Other New Project",
          "status": "NEW"
        },
        {
          "id": "6",
          "applicant_id": "1",
          "credit_type_abbreviation": "PTEST",
          "name": "Another New Project",
          "status": "NEW"
        },
        {
          "id": "7",
          "applicant_id": "1",
          "credit_type_abbreviation": "PTEST",
          "name": "Another Rejected Project",
          "status": "REJECTED"
        },
        {
          "id": "8",
          "applicant_id": "1",
          "credit_type_abbreviation": "PTEST",
          "name": "Another Suspended Project",
          "status": "SUSPENDED"
        },
        {
          "id": "9",
          "applicant_id": "1",
          "credit_type_abbreviation": "PTEST",
          "name": "New Project to update",
          "status": "NEW"
        },
        {
          "id": "10",
          "applicant_id": "1",
          "credit_type_abbreviation": "ETEST",
          "name": "Approved project 2",
          "status": "APPROVED"
        },
        {
          "id": "11",
          "applicant_id": "1",
          "credit_type_abbreviation": "ETEST",
          "name": "Approved project to suspend",
          "status": "APPROVED"
        }
      ],
      "credit_collections": [
        {
          "denom": "ETEST/123",
          "project_id": "1",
          "total_amount": {
            "active": "1000",
            "retired": "200"
          },
          "metadata_uris": [
            "ipfs://CID1",
            "ipfs://CID2"
          ]
        },
        {
          "denom": "PTEST/00001",
          "project_id": "2",
          "total_amount": {
            "active": "15000",
            "retired": "0"
          },
          "metadata_uris": [
            "ipfs://bafkreibwz7beb47uqy6wgjcidcxkqw2cqbfsvo3bx62zv2bd4yjx6ahcxa"
          ]
        }
      ],
      "credit_balances": [
        {
          "owner": "empower18s4hq5tn3yp9jphlastrgdgx5da6uk4882pjym",
          "denom": "ETEST/123",
          "balance": {
            "active": "1000",
            "retired": "200"
          }
        },
        {
          "owner": "empower18s4hq5tn3yp9jphlastrgdgx5da6uk4882pjym",
          "denom": "PTEST/00001",
          "balance": {
            "active": "5000",
            "retired": "0"
          }
        },
        {
          "owner": "empower10meawsx9u3lkl2p6amk87k6tye6qn6dkqx2ksj",
          "denom": "PTEST/00001",
          "balance": {
            "active": "5000",
            "retired": "0"
          }
        },
        {
          "owner": "empower1defgz460qy5jvkfvuz5qe0spelykpndewq2f0d",
          "denom": "PTEST/00001",
          "balance": {
            "active": "5000",
            "retired": "0"
          }
        }
      ]
    },
    "proofofexistence": {
      "proof_list": []
    },
    "slashing": {
      "params": {
        "signed_blocks_window": "100",
        "min_signed_per_window": "0.500000000000000000",
        "downtime_jail_duration": "600s",
        "slash_fraction_double_sign": "0.050000000000000000",
        "slash_fraction_downtime": "0.010000000000000000"
      },
      "signing_infos": [
        {
          "address": "empowervalcons1d0de33y6exxc9gpmz0gvhj7pl7k4g243pmrhwq",
          "validator_signing_info": {
            "address": "empowervalcons1d0de33y6exxc9gpmz0gvhj7pl7k4g243pmrhwq",
            "start_height": "0",
            "index_offset": "6",
            "jailed_until": "0001-01-01T00:00:00Z",
            "tombstoned": false,
            "missed_blocks_counter": "0"
          }
        }
      ],
      "missed_blocks": []
    },
    "staking": {
      "params": {
        "unbonding_time": "300s",
        "max_validators": 1,
        "max_entries": 7,
        "historical_entries": 10000,
        "bond_denom": "umpwr",
        "min_commission_rate": "0.000000000000000000"
      },
      "last_total_power": "900000",
      "last_validator_powers": [
        {
          "address": "empowervaloper1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfexwpvm",
          "power": "900000"
        }
      ],
      "validators": [
        {
          "operator_address": "empowervaloper1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfexwpvm",
          "consensus_pubkey": {
            "@type": "/cosmos.crypto.ed25519.PubKey",
            "key": "SEX/4kov5P3qbU8/QGQxg4rNfXJaLPEzOloPfLBuJeQ="
          },
          "jailed": false,
          "status": "BOND_STATUS_BONDED",
          "tokens": "900000000000",
          "delegator_shares": "900000000000.000000000000000000",
          "description": {
            "moniker": "Empower Validator",
            "identity": "",
            "website": "",
            "security_contact": "",
            "details": ""
          },
          "unbonding_height": "0",
          "unbonding_time": "0001-01-01T00:00:00Z",
          "commission": {
            "commission_rates": {
              "rate": "0.100000000000000000",
              "max_rate": "0.200000000000000000",
              "max_change_rate": "0.010000000000000000"
            },
            "update_time": "2023-11-21T11:05:38.779092760Z"
          },
          "min_self_delegation": "1",
          "unbonding_on_hold_ref_count": "0",
          "unbonding_ids": []
        }
      ],
      "delegations": [
        {
          "delegator_address": "empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw",
          "validator_address": "empowervaloper1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfexwpvm",
          "shares": "900000000000.000000000000000000"
        }
      ],
      "unbonding_delegations": [],
      "redelegations": [],
      "exported": true
    },
    "tendermint-client": null,
    "transfer": {
      "port_id": "transfer",
      "denom_traces": [],
      "params": {
        "send_enabled": true,
        "receive_enabled": true
      },
      "total_escrowed": []
    },
    "upgrade": {},
    "vesting": {},
    "wasm": {
      "params": {
        "code_upload_access": {
          "permission": "Everybody",
          "addresses": []
        },
        "instantiate_default_permission": "Everybody"
      },
      "codes": [],
      "contracts": [],
      "sequences": []
    }
  }
}# empowerd keys list
Enter keyring passphrase (attempt 1/3):
incorrect passphrase
Enter keyring passphrase (attempt 2/3):
incorrect passphrase
Enter keyring passphrase (attempt 3/3):
incorrect passphrase
migrate err for key validator.info: "too many failed passphrase attempts"
[]

# empowerd keys list
Enter keyring passphrase (attempt 1/3):
incorrect passphrase
Enter keyring passphrase (attempt 2/3):
incorrect passphrase
Enter keyring passphrase (attempt 3/3):
- address: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  name: validator
  pubkey: '{"@type":"/cosmos.crypto.secp256k1.PubKey","key":"A9XKI69h2nvYM89MfPdKr3nWv1NHsDSqXla7aW0mhvUX"}'
  type: local

# empowerd q bank balances empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
balances:
- amount: "1000000000000"
  denom: umpwr
pagination:
  next_key: null
  total: "0"
# ls
# pwd
/root
# cd
# ls
# cd ..
# ls
 bin    dev   go     lib     lib64    media   opt    root   sbin   sys	 usr  '~'
 boot   etc   home   lib32   libx32   mnt     proc   run    srv    tmp	 var
# cd /root
# ls
cw721_base.wa: not found
# ^[[3~^[[3~^[[3^C store $WASM_FILE -^[[B^[[B^[[A^[[A                                                          # ^[[B^C 18:                          



# WASM_FILE=/root/cw721_base.wasm

# empowerd tx wasm store $WASM_FILE --from validator --gas auto --gas-prices 0.025umpwr --gas-adjustment 1.75 --yes --chain-id emp-devnet-1    




Enter keyring passphrase (attempt 1/3):
gas estimate: 3949758
code: 0
codespace: ""
data: ""
events: []
gas_used: "0"
gas_wanted: "0"
height: "0"
info: ""
logs: []
raw_log: '[]'
timestamp: ""
tx: null
txhash: 179D86B5FAA8C8F5DE06BEDA485B0A87D4964628AFFED417C1724069FF0459CA
# empowerd q tx 179D86B5FAA8C8F5DE06BEDA485B0A87D4964628AFFED417C1724069FF0459CA
code: 0
codespace: ""
data: 124E0A262F636F736D7761736D2E7761736D2E76312E4D736753746F7265436F6465526573706F6E736512240801122024CD867D5FD85855CC7D1F1DE5BFF2685F620D84DC550F5BBD04F1FB6C97CC2D
events:
- attributes:
  - index: true
    key: spender
    value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  - index: true
    key: amount
    value: 98744umpwr
  type: coin_spent
- attributes:
  - index: true
    key: receiver
    value: empower17xpfvakm2amg962yls6f84z3kell8c5lv48t3r
  - index: true
    key: amount
    value: 98744umpwr
  type: coin_received
- attributes:
  - index: true
    key: recipient
    value: empower17xpfvakm2amg962yls6f84z3kell8c5lv48t3r
  - index: true
    key: sender
    value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  - index: true
    key: amount
    value: 98744umpwr
  type: transfer
- attributes:
  - index: true
    key: sender
    value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  type: message
- attributes:
  - index: true
    key: fee
    value: 98744umpwr
  - index: true
    key: fee_payer
    value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  type: tx
- attributes:
  - index: true
    key: acc_seq
    value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw/0
  type: tx
- attributes:
  - index: true
    key: signature
    value: Zs/Xhmoy8iNQlnGK8lIoQM+36Loo0ad6e+ZIwKmfFT4DB32BTgCktLF5dBd3P8eThH6cStTuGWeGi7NUR2YvzA==
  type: tx
- attributes:
  - index: true
    key: action
    value: /cosmwasm.wasm.v1.MsgStoreCode
  - index: true
    key: sender
    value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  - index: true
    key: module
    value: wasm
  type: message
- attributes:
  - index: true
    key: code_checksum
    value: 24cd867d5fd85855cc7d1f1de5bff2685f620d84dc550f5bbd04f1fb6c97cc2d
  - index: true
    key: code_id
    value: "1"
  type: store_code
gas_used: "2275607"
gas_wanted: "3949758"
height: "228"
info: ""
logs:
- events:
  - attributes:
    - key: action
      value: /cosmwasm.wasm.v1.MsgStoreCode
    - key: sender
      value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
    - key: module
      value: wasm
    type: message
  - attributes:
    - key: code_checksum
      value: 24cd867d5fd85855cc7d1f1de5bff2685f620d84dc550f5bbd04f1fb6c97cc2d
    - key: code_id
      value: "1"
    type: store_code
  log: ""
  msg_index: 0
raw_log: '[{"msg_index":0,"events":[{"type":"message","attributes":[{"key":"action","value":"/cosmwasm.wasm.v1.MsgStoreCode"},{"key":"sender","value":"empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw"},{"key":"module","value":"wasm"}]},{"type":"store_code","attributes":[{"key":"code_checksum","value":"24cd867d5fd85855cc7d1f1de5bff2685f620d84dc550f5bbd04f1fb6c97cc2d"},{"key":"code_id","value":"1"}]}]}]'
timestamp: "2024-01-03T14:03:46Z"
tx:
  '@type': /cosmos.tx.v1beta1.Tx
  auth_info:
    fee:
      amount:
      - amount: "98744"
        denom: umpwr
      gas_limit: "3949758"
      granter: ""
      payer: ""
    signer_infos:
    - mode_info:
        single:
          mode: SIGN_MODE_DIRECT
      public_key:
        '@type': /cosmos.crypto.secp256k1.PubKey
        key: A9XKI69h2nvYM89MfPdKr3nWv1NHsDSqXla7aW0mhvUX
      sequence: "0"
    tip: null
  body:
    extension_options: []
    memo: ""
    messages:
    non_critical_extension_options: []
    timeout_height: "0"
  signatures:
  - Zs/Xhmoy8iNQlnGK8lIoQM+36Loo0ad6e+ZIwKmfFT4DB32BTgCktLF5dBd3P8eThH6cStTuGWeGi7NUR2YvzA==
txhash: 179D86B5FAA8C8F5DE06BEDA485B0A87D4964628AFFED417C1724069FF0459CA
# empowerd q wasm
Querying commands for the wasm module

Usage:
  empowerd query wasm [flags]
  empowerd query wasm [command]

Available Commands:
  build-address             build contract address
  code                      Downloads wasm bytecode for given code id
  code-info                 Prints out metadata of a code id
  contract                  Prints out metadata of a contract given its address
  contract-history          Prints out the code history for a contract given its address
  contract-state            Querying commands for the wasm module
  libwasmvm-version         Get libwasmvm version
  list-code                 List all wasm bytecode on the chain
  list-contract-by-code     List wasm all bytecode on the chain for given code id
  list-contracts-by-creator List all contracts by creator
  params                    Query the current wasm parameters
  pinned                    List all pinned code ids

Flags:
  -h, --help   help for wasm

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

Use "empowerd query wasm [command] --help" for more information about a command.
# empowerd q wasm list-code
code_infos:
- code_id: "1"
  creator: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  data_hash: 24CD867D5FD85855CC7D1F1DE5BFF2685F620D84DC550F5BBD04F1FB6C97CC2D
  instantiate_permission:
    addresses: []
    permission: Everybody
pagination:
  next_key: null
  total: "0"



# empowerd tx wasm instantiate 1 '{"minter": "empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw", "name": "Plastic Credit NFT", "symbol": "PCRD"}' --label nft --admin empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw --from validator --gas auto --gas-prices 0.025umpwr --gas-adjustment 1.75 --yes --chain-id emp-devnet-1


Enter keyring passphrase (attempt 1/3):
gas estimate: 257626
code: 0
codespace: ""
data: ""
events: []
gas_used: "0"
gas_wanted: "0"
height: "0"
info: ""
logs: []
raw_log: '[]'
timestamp: ""
tx: null
txhash: 1692C187A2A8C40585FBF59CDC7AFEF83477F8396EE3D127093F8815B01AE91E
# ^C
# empower q tx 1692C187A2A8C40585FBF59CDC7AFEF83477F8396EE3D127093F8815B01AE91E^[[D^[[D^[[D^[[D^[[D^[[D^[[D^[[D^[[A^C                              
# empowerd q tx 1692C187A2A8C40585FBF59CDC7AFEF83477F8396EE3D127093F8815B01AE91E
code: 0
codespace: ""
data: 12780A302F636F736D7761736D2E7761736D2E76312E4D7367496E7374616E7469617465436F6E7472616374526573706F6E736512440A42656D706F7765723134686A32746176713866706573647778786375343472747933686839307668756A7276636D73746C347A723374786D6676773973666734756D75
events:
- attributes:
  - index: true
    key: spender
    value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  - index: true
    key: amount
    value: 6441umpwr
  type: coin_spent
- attributes:
  - index: true
    key: receiver
    value: empower17xpfvakm2amg962yls6f84z3kell8c5lv48t3r
  - index: true
    key: amount
    value: 6441umpwr
  type: coin_received
- attributes:
  - index: true
    key: recipient
    value: empower17xpfvakm2amg962yls6f84z3kell8c5lv48t3r
  - index: true
    key: sender
    value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  - index: true
    key: amount
    value: 6441umpwr
  type: transfer
- attributes:
  - index: true
    key: sender
    value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  type: message
- attributes:
  - index: true
    key: fee
    value: 6441umpwr
  - index: true
    key: fee_payer
    value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  type: tx
- attributes:
  - index: true
    key: acc_seq
    value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw/1
  type: tx
- attributes:
  - index: true
    key: signature
    value: fVtZM6KSvizSmQRDl4sM5St7qcZdhikQlqMpPzg2X/I/mDgi80iDEsWuvZLiP8f3ffUJ/FJzCMv3tCAdSPxo0w==
  type: tx
- attributes:
  - index: true
    key: action
    value: /cosmwasm.wasm.v1.MsgInstantiateContract
  - index: true
    key: sender
    value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  - index: true
    key: module
    value: wasm
  type: message
- attributes:
  - index: true
    key: _contract_address
    value: empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu
  - index: true
    key: code_id
    value: "1"
  type: instantiate
gas_used: "165801"
gas_wanted: "257626"
height: "327"
info: ""
logs:
- events:
  - attributes:
    - key: action
      value: /cosmwasm.wasm.v1.MsgInstantiateContract
    - key: sender
      value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
    - key: module
      value: wasm
    type: message
  - attributes:
    - key: _contract_address
      value: empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu
    - key: code_id
      value: "1"
    type: instantiate
  log: ""
  msg_index: 0
raw_log: '[{"msg_index":0,"events":[{"type":"message","attributes":[{"key":"action","value":"/cosmwasm.wasm.v1.MsgInstantiateContract"},{"key":"sender","value":"empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw"},{"key":"module","value":"wasm"}]},{"type":"instantiate","attributes":[{"key":"_contract_address","value":"empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu"},{"key":"code_id","value":"1"}]}]}]'
timestamp: "2024-01-03T14:12:03Z"
tx:
  '@type': /cosmos.tx.v1beta1.Tx
  auth_info:
    fee:
      amount:
      - amount: "6441"
        denom: umpwr
      gas_limit: "257626"
      granter: ""
      payer: ""
    signer_infos:
    - mode_info:
        single:
          mode: SIGN_MODE_DIRECT
      public_key:
        '@type': /cosmos.crypto.secp256k1.PubKey
        key: A9XKI69h2nvYM89MfPdKr3nWv1NHsDSqXla7aW0mhvUX
      sequence: "1"
    tip: null
  body:
    extension_options: []
    memo: ""
    messages:
    - '@type': /cosmwasm.wasm.v1.MsgInstantiateContract
      admin: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
      code_id: "1"
      funds: []
      label: nft
      msg:
        minter: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
        name: Plastic Credit NFT
        symbol: PCRD
      sender: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
    non_critical_extension_options: []
    timeout_height: "0"
  signatures:
  - fVtZM6KSvizSmQRDl4sM5St7qcZdhikQlqMpPzg2X/I/mDgi80iDEsWuvZLiP8f3ffUJ/FJzCMv3tCAdSPxo0w==
txhash: 1692C187A2A8C40585FBF59CDC7AFEF83477F8396EE3D127093F8815B01AE91E



# empowerd tx wasm execute empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu '{"mint":{"token_id": "1", "owner": "empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw", "token_uri": "www.example.com"}}' --from validator --yes --chain-id emp-devnet-1


Enter keyring passphrase (attempt 1/3):
code: 0
codespace: ""
data: ""
events: []
gas_used: "0"
gas_wanted: "0"
height: "0"
info: ""
logs: []
raw_log: '[]'
timestamp: ""
tx: null
txhash: 75292481670C69A57B687063B43EC9A6894187F65B5307EE77219A5AF34FF8E0
# empowerd q tx 75292481670C69A57B687063B43EC9A6894187F65B5307EE77219A5AF34FF8E0       
code: 0
codespace: ""
data: 122E0A2C2F636F736D7761736D2E7761736D2E76312E4D736745786563757465436F6E7472616374526573706F6E7365
events:
- attributes:
  - index: true
    key: fee
    value: ""
  - index: true
    key: fee_payer
    value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  type: tx
- attributes:
  - index: true
    key: acc_seq
    value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw/2
  type: tx
- attributes:
  - index: true
    key: signature
    value: oA8dE8UdvOd3WH/Rrm8Vl/s43eP997QEd476FEfAsm0pJYwwvsU26eUotpE3aq8Al5A5NWjCgigbW6oPdn3idA==
  type: tx
- attributes:
  - index: true
    key: action
    value: /cosmwasm.wasm.v1.MsgExecuteContract
  - index: true
    key: sender
    value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  - index: true
    key: module
    value: wasm
  type: message
- attributes:
  - index: true
    key: _contract_address
    value: empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu
  type: execute
- attributes:
  - index: true
    key: _contract_address
    value: empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu
  - index: true
    key: action
    value: mint
  - index: true
    key: minter
    value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  - index: true
    key: owner
    value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  - index: true
    key: token_id
    value: "1"
  type: wasm
gas_used: "113245"
gas_wanted: "200000"
height: "405"
info: ""
logs:
- events:
  - attributes:
    - key: action
      value: /cosmwasm.wasm.v1.MsgExecuteContract
    - key: sender
      value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
    - key: module
      value: wasm
    type: message
  - attributes:
    - key: _contract_address
      value: empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu
    type: execute
  - attributes:
    - key: _contract_address
      value: empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu
    - key: action
      value: mint
    - key: minter
      value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
    - key: owner
      value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
    - key: token_id
      value: "1"
    type: wasm
  log: ""
  msg_index: 0
raw_log: '[{"msg_index":0,"events":[{"type":"message","attributes":[{"key":"action","value":"/cosmwasm.wasm.v1.MsgExecuteContract"},{"key":"sender","value":"empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw"},{"key":"module","value":"wasm"}]},{"type":"execute","attributes":[{"key":"_contract_address","value":"empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu"}]},{"type":"wasm","attributes":[{"key":"_contract_address","value":"empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu"},{"key":"action","value":"mint"},{"key":"minter","value":"empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw"},{"key":"owner","value":"empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw"},{"key":"token_id","value":"1"}]}]}]'
timestamp: "2024-01-03T14:18:34Z"
tx:
  '@type': /cosmos.tx.v1beta1.Tx
  auth_info:
    fee:
      amount: []
      gas_limit: "200000"
      granter: ""
      payer: ""
    signer_infos:
    - mode_info:
        single:
          mode: SIGN_MODE_DIRECT
      public_key:
        '@type': /cosmos.crypto.secp256k1.PubKey
        key: A9XKI69h2nvYM89MfPdKr3nWv1NHsDSqXla7aW0mhvUX
      sequence: "2"
    tip: null
  body:
    extension_options: []
    memo: ""
    messages:
    - '@type': /cosmwasm.wasm.v1.MsgExecuteContract
      contract: empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu
      funds: []
      msg:
        mint:
          owner: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
          token_id: "1"
          token_uri: www.example.com
      sender: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
    non_critical_extension_options: []
    timeout_height: "0"
  signatures:
  - oA8dE8UdvOd3WH/Rrm8Vl/s43eP997QEd476FEfAsm0pJYwwvsU26eUotpE3aq8Al5A5NWjCgigbW6oPdn3idA==
txhash: 75292481670C69A57B687063B43EC9A6894187F65B5307EE77219A5AF34FF8E0



# empowerd q wasm contract-state smart empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu '{"nft_info":{"token_id": "d57318516d1d626cbe260dac565fe28e"}}'

https://ipfs.empowerchain.io/ipfs://QmRt18vwW67gHzhYNTELd7HfGHi6HUiFoWcvVDqQnjemxp

"https://ipfs.empowerchain.io/ipfs/QmPWQjwBpkCYtXQGNanb4iUGS1QuMJxZMMurYuv8aDLzoV"

data:
  extension: null
  token_uri: www.example.com
# 




empowerd tx pc create-applicant alex test --chain-id emp-devnet-1 --from empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw

empowerd tx pc create-project 4 PTEST pickers --chain-id emp-devnet-1 --from empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw


empowerd tx pc issue-credits 12 345254523543 100 ipfs/pickers --chain-id emp-devnet-1 --from empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw

empowerd tx pc approve-project 12 --chain-id emp-devnet-1 --from empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw



WASM_FILE=/root/cw721_base.wasm

empowerd tx wasm store $WASM_FILE --from validator --gas auto --gas-prices 0.025umpwr --gas-adjustment 1.75 --yes --chain-id emp-devnet-1

empowerd tx wasm instantiate 1 '{"minter": "empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw", "name": "Plastic Credit NFT", "symbol": "PCRD"}' --label nft --admin empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw --from validator --gas auto --gas-prices 0.025umpwr --gas-adjustment 1.75 --yes --chain-id emp-devnet-1

empowerd tx wasm execute empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu '{"mint":{"token_id": "1", "owner": "empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw", "token_uri": "www.example.com"}}' --from validator --yes --chain-id emp-devnet-1

empowerd q wasm contract-state smart empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu '{"nft_info":{"token_id": "d57318516d1d626cbe260dac565fe28e"}}'

empower1pvrwmjuusn9wh34j7y520g8gumuy9xtl3gvprlljfdpwju3x7ucs0pkh0n

empowerd tx authz grant empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw send --spend-limit=100stake --from empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw --chain-id emp-devnet-1


empowerd tx wasm store /root/cw721_base.wasm --from=empower13cwsdsetcrhcyd3jeed0mgteg35qaju0q5s0u0drfylagahygwwst8z2la --generate-only --chain-id circulus-1 > storemsg.json

empowerd tx group submit-proposal storeprop.json --from public-hotwallet --gas auto --gas-adjustment 1.6 --gas-prices 0.025umpwr --chain-id circulus-1 --node https://empower-testnet-rpc.polkachu.com:443








































































aquish@vaquish-XPS-15-9500:~$ docker ps
CONTAINER ID   IMAGE                                                 COMMAND                  CREATED         STATUS         PORTS                                                     NAMES
dc4df2e3dafa   ghcr.io/empowerplastic/empowerchain-devnet:74df5f1a   "/bin/sh -c 'empower…"   8 seconds ago   Up 8 seconds   1317/tcp, 9090/tcp, 26656/tcp, 0.0.0.0:26657->26657/tcp   funny_curie
vaquish@vaquish-XPS-15-9500:~$ docker exec -it dc4df2e3dafa bash
root@dc4df2e3dafa:/# WASM_FILE=/root/cw721_base.wasm
root@dc4df2e3dafa:/# empowerd tx wasm store $WASM_FILE --from validator --gas auto --gas-prices 0.025umpwr --gas-adjustment 1.75 --yes --chain-id emp-devnet-1
Enter keyring passphrase (attempt 1/3):
gas estimate: 3949758
code: 0
codespace: ""
data: ""
events: []
gas_used: "0"
gas_wanted: "0"
height: "0"
info: ""
logs: []
raw_log: '[]'
timestamp: ""
tx: null
txhash: 179D86B5FAA8C8F5DE06BEDA485B0A87D4964628AFFED417C1724069FF0459CA
root@dc4df2e3dafa:/# empowerd tx wasm instantiate 1 '{"minter": "empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw", "name": "Plastic Credit NFT", "symbol": "PCRD"}' --label nft --admin empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw --from validator --gas auto --gas-prices 0.025umpwr --gas-adjustment 1.75 --yes --chain-id emp-devnet-1
Enter keyring passphrase (attempt 1/3):
gas estimate: 257521
code: 0
codespace: ""
data: ""
events: []
gas_used: "0"
gas_wanted: "0"
height: "0"
info: ""
logs: []
raw_log: '[]'
timestamp: ""
tx: null
txhash: 44B70388339C8DF5FB5E47B34BEC19B869D84C703A38390292BED10FC14B84A5
root@dc4df2e3dafa:/# empowerd tx wasm execute empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu '{"mint":{"token_id": "1", "owner": "empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw", "token_uri": "www.example.com"}}' --from validator --yes --chain-id emp-devnet-1
Enter keyring passphrase (attempt 1/3):
code: 0
codespace: ""
data: ""
events: []
gas_used: "0"
gas_wanted: "0"
height: "0"
info: ""
logs: []
raw_log: '[]'
timestamp: ""
tx: null
txhash: 75292481670C69A57B687063B43EC9A6894187F65B5307EE77219A5AF34FF8E0
root@dc4df2e3dafa:/# empowerd q wasm contract-state smart empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu '{"nft_info":{"token_id": "d57318516d1d626cbe260dac565fe28e"}}'
Error: rpc error: code = Unknown desc = type: cw721_base::state::TokenInfo<core::option::Option<cosmwasm_std::results::empty::Empty>>; key: [00, 06, 74, 6F, 6B, 65, 6E, 73, 64, 35, 37, 33, 31, 38, 35, 31, 36, 64, 31, 64, 36, 32, 36, 63, 62, 65, 32, 36, 30, 64, 61, 63, 35, 36, 35, 66, 65, 32, 38, 65] not found: query wasm contract failed: unknown request
root@dc4df2e3dafa:/# cd
root@dc4df2e3dafa:~# ls
cw721_base.wasm
root@dc4df2e3dafa:~# ls -a

.  ..  .bashrc	.empowerchain  .profile  cw721_base.wasm
root@dc4df2e3dafa:~# empowerd q wasm contract-state smart empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu '{"nft_info":{"token_id": "d57318516d1d626cbe260dac565fe28e"}}'
Error: rpc error: code = Unknown desc = type: cw721_base::state::TokenInfo<core::option::Option<cosmwasm_std::results::empty::Empty>>; key: [00, 06, 74, 6F, 6B, 65, 6E, 73, 64, 35, 37, 33, 31, 38, 35, 31, 36, 64, 31, 64, 36, 32, 36, 63, 62, 65, 32, 36, 30, 64, 61, 63, 35, 36, 35, 66, 65, 32, 38, 65] not found: query wasm contract failed: unknown request
root@dc4df2e3dafa:~# empowerd q tx 75292481670C69A57B687063B43EC9A6894187F65B5307EE77219A5AF34FF8E0
code: 0
codespace: ""
data: 122E0A2C2F636F736D7761736D2E7761736D2E76312E4D736745786563757465436F6E7472616374526573706F6E7365
events:
- attributes:
  - index: true
    key: fee
    value: ""
  - index: true
    key: fee_payer
    value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  type: tx
- attributes:
  - index: true
    key: acc_seq
    value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw/2
  type: tx
- attributes:
  - index: true
    key: signature
    value: oA8dE8UdvOd3WH/Rrm8Vl/s43eP997QEd476FEfAsm0pJYwwvsU26eUotpE3aq8Al5A5NWjCgigbW6oPdn3idA==
  type: tx
- attributes:
  - index: true
    key: action
    value: /cosmwasm.wasm.v1.MsgExecuteContract
  - index: true
    key: sender
    value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  - index: true
    key: module
    value: wasm
  type: message
- attributes:
  - index: true
    key: _contract_address
    value: empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu
  type: execute
- attributes:
  - index: true
    key: _contract_address
    value: empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu
  - index: true
    key: action
    value: mint
  - index: true
    key: minter
    value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  - index: true
    key: owner
    value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  - index: true
    key: token_id
    value: "1"
  type: wasm
gas_used: "113241"
gas_wanted: "200000"
height: "42"
info: ""
logs:
- events:
  - attributes:
    - key: action
      value: /cosmwasm.wasm.v1.MsgExecuteContract
    - key: sender
      value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
    - key: module
      value: wasm
    type: message
  - attributes:
    - key: _contract_address
      value: empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu
    type: execute
  - attributes:
    - key: _contract_address
      value: empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu
    - key: action
      value: mint
    - key: minter
      value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
    - key: owner
      value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
    - key: token_id
      value: "1"
    type: wasm
  log: ""
  msg_index: 0
raw_log: '[{"msg_index":0,"events":[{"type":"message","attributes":[{"key":"action","value":"/cosmwasm.wasm.v1.MsgExecuteContract"},{"key":"sender","value":"empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw"},{"key":"module","value":"wasm"}]},{"type":"execute","attributes":[{"key":"_contract_address","value":"empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu"}]},{"type":"wasm","attributes":[{"key":"_contract_address","value":"empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu"},{"key":"action","value":"mint"},{"key":"minter","value":"empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw"},{"key":"owner","value":"empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw"},{"key":"token_id","value":"1"}]}]}]'
timestamp: "2024-01-06T01:24:29Z"
tx:
  '@type': /cosmos.tx.v1beta1.Tx
  auth_info:
    fee:
      amount: []
      gas_limit: "200000"
      granter: ""
      payer: ""
    signer_infos:
    - mode_info:
        single:
          mode: SIGN_MODE_DIRECT
      public_key:
        '@type': /cosmos.crypto.secp256k1.PubKey
        key: A9XKI69h2nvYM89MfPdKr3nWv1NHsDSqXla7aW0mhvUX
      sequence: "2"
    tip: null
  body:
    extension_options: []
    memo: ""
    messages:
    - '@type': /cosmwasm.wasm.v1.MsgExecuteContract
      contract: empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu
      funds: []
      msg:
        mint:
          owner: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
          token_id: "1"
          token_uri: www.example.com
      sender: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
    non_critical_extension_options: []
    timeout_height: "0"
  signatures:
  - oA8dE8UdvOd3WH/Rrm8Vl/s43eP997QEd476FEfAsm0pJYwwvsU26eUotpE3aq8Al5A5NWjCgigbW6oPdn3idA==
txhash: 75292481670C69A57B687063B43EC9A6894187F65B5307EE77219A5AF34FF8E0
root@dc4df2e3dafa:~# empowerd q wasm contract-state smart empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu '{"nft_info":{"token_id": "1"}}'
data:
  extension: null
  token_uri: www.example.com
root@dc4df2e3dafa:~# empowerd tx pc create-applicant alex test --chain-id emp-devnet-1 --from empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
Enter keyring passphrase (attempt 1/3):
auth_info:
  fee:
    amount: []
    gas_limit: "200000"
    granter: ""
    payer: ""
  signer_infos: []
  tip: null
body:
  extension_options: []
  memo: ""
  messages:
  - '@type': /empowerchain.plasticcredit.MsgCreateApplicant
    admin: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
    description: test
    name: alex
  non_critical_extension_options: []
  timeout_height: "0"
signatures: []
confirm transaction before signing and broadcasting [y/N]: y
code: 0
codespace: ""
data: ""
events: []
gas_used: "0"
gas_wanted: "0"
height: "0"
info: ""
logs: []
raw_log: '[]'
timestamp: ""
tx: null
txhash: E1B2FE54D0595D932C0166C003E8C85F7BF66BBEFB6EC63E8E7B0416AF5669E4
root@dc4df2e3dafa:~# empowerd tx pc create-project 4 PTEST pickers --chain-id emp-devnet-1 --from empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
Enter keyring passphrase (attempt 1/3):
auth_info:
  fee:
    amount: []
    gas_limit: "200000"
    granter: ""
    payer: ""
  signer_infos: []
  tip: null
body:
  extension_options: []
  memo: ""
  messages:
  - '@type': /empowerchain.plasticcredit.MsgCreateProject
    applicant_id: "4"
    creator: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
    credit_type_abbreviation: PTEST
    name: pickers
  non_critical_extension_options: []
  timeout_height: "0"
signatures: []
confirm transaction before signing and broadcasting [y/N]: y
code: 0
codespace: ""
data: ""
events: []
gas_used: "0"
gas_wanted: "0"
height: "0"
info: ""
logs: []
raw_log: '[]'
timestamp: ""
tx: null
txhash: 17709BCD8C0CC07EB83586662C1D63B5619960D9B4EB1721E35E0CA92943A4FE
root@dc4df2e3dafa:~# empowerd tx pc approve-project 12 --chain-id emp-devnet-1 --from 6be393b5006e01cf67cf53f37a84d7c58baa32a2d03a008a882a9dace6939f9e
Error: 6be393b5006e01cf67cf53f37a84d7c58baa32a2d03a008a882a9dace6939f9e.info: key not found
Usage:
  empowerd tx plasticcredit approve-project [project-id] [flags]

Flags:
  -a, --account-number uint      The account number of the signing account (offline mode only)
      --aux                      Generate aux signer data instead of sending a tx
  -b, --broadcast-mode string    Transaction broadcasting mode (sync|async) (default "sync")
      --chain-id string          The network chain ID
      --dry-run                  ignore the --gas flag and perform a simulation of a transaction, but don't broadcast it (when enabled, the local Keybase is not accessible)
      --fee-granter string       Fee granter grants fees for the transaction
      --fee-payer string         Fee payer pays fees for the transaction instead of deducting from the signer
      --fees string              Fees to pay along with transaction; eg: 10uatom
      --from string              Name or address of private key with which to sign
      --gas string               gas limit to set per-transaction; set to "auto" to calculate sufficient gas automatically. Note: "auto" option doesn't always report accurate results. Set a valid coin value to adjust the result. Can be used instead of "fees". (default 200000)
      --gas-adjustment float     adjustment factor to be multiplied against the estimate returned by the tx simulation; if the gas limit is set manually this flag is ignored  (default 1)
      --gas-prices string        Gas prices in decimal format to determine the transaction fee (e.g. 0.1uatom)
      --generate-only            Build an unsigned transaction and write it to STDOUT (when enabled, the local Keybase only accessed when providing a key name)
  -h, --help                     help for approve-project
      --keyring-backend string   Select keyring's backend (os|file|kwallet|pass|test|memory) (default "os")
      --keyring-dir string       The client Keyring directory; if omitted, the default 'home' directory will be used
      --ledger                   Use a connected Ledger device
      --node string              <host>:<port> to tendermint rpc interface for this chain (default "tcp://localhost:26657")
      --note string              Note to add a description to the transaction (previously --memo)
      --offline                  Offline mode (does not allow any online functionality)
  -o, --output string            Output format (text|json) (default "json")
  -s, --sequence uint            The sequence number of the signing account (offline mode only)
      --sign-mode string         Choose sign mode (direct|amino-json|direct-aux), this is an advanced feature
      --timeout-height uint      Set a block timeout height to prevent the tx from being committed past a certain height
      --tip string               Tip is the amount that is going to be transferred to the fee payer on the target chain. This flag is only valid when used with --aux, and is ignored if the target chain didn't enable the TipDecorator
  -y, --yes                      Skip tx broadcasting prompt confirmation

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

root@dc4df2e3dafa:~# empowerd tx pc approve-project 12 --chain-id emp-devnet-1 --from issuer                
Error: issuer.info: key not found
Usage:
  empowerd tx plasticcredit approve-project [project-id] [flags]

Flags:
  -a, --account-number uint      The account number of the signing account (offline mode only)
      --aux                      Generate aux signer data instead of sending a tx
  -b, --broadcast-mode string    Transaction broadcasting mode (sync|async) (default "sync")
      --chain-id string          The network chain ID
      --dry-run                  ignore the --gas flag and perform a simulation of a transaction, but don't broadcast it (when enabled, the local Keybase is not accessible)
      --fee-granter string       Fee granter grants fees for the transaction
      --fee-payer string         Fee payer pays fees for the transaction instead of deducting from the signer
      --fees string              Fees to pay along with transaction; eg: 10uatom
      --from string              Name or address of private key with which to sign
      --gas string               gas limit to set per-transaction; set to "auto" to calculate sufficient gas automatically. Note: "auto" option doesn't always report accurate results. Set a valid coin value to adjust the result. Can be used instead of "fees". (default 200000)
      --gas-adjustment float     adjustment factor to be multiplied against the estimate returned by the tx simulation; if the gas limit is set manually this flag is ignored  (default 1)
      --gas-prices string        Gas prices in decimal format to determine the transaction fee (e.g. 0.1uatom)
      --generate-only            Build an unsigned transaction and write it to STDOUT (when enabled, the local Keybase only accessed when providing a key name)
  -h, --help                     help for approve-project
      --keyring-backend string   Select keyring's backend (os|file|kwallet|pass|test|memory) (default "os")
      --keyring-dir string       The client Keyring directory; if omitted, the default 'home' directory will be used
      --ledger                   Use a connected Ledger device
      --node string              <host>:<port> to tendermint rpc interface for this chain (default "tcp://localhost:26657")
      --note string              Note to add a description to the transaction (previously --memo)
      --offline                  Offline mode (does not allow any online functionality)
  -o, --output string            Output format (text|json) (default "json")
  -s, --sequence uint            The sequence number of the signing account (offline mode only)
      --sign-mode string         Choose sign mode (direct|amino-json|direct-aux), this is an advanced feature
      --timeout-height uint      Set a block timeout height to prevent the tx from being committed past a certain height
      --tip string               Tip is the amount that is going to be transferred to the fee payer on the target chain. This flag is only valid when used with --aux, and is ignored if the target chain didn't enable the TipDecorator
  -y, --yes                      Skip tx broadcasting prompt confirmation

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

root@dc4df2e3dafa:~# empowerd tx pc approve-project 12 --chain-id emp-devnet-1 --from empower1xgsaene8aqfknmldemvl5q0mtgcgjv9svupqwu
Error: key with address empower1xgsaene8aqfknmldemvl5q0mtgcgjv9svupqwu not found: key not found
Usage:
  empowerd tx plast
root@dc4df2e3dafa:~# empowerd tx wasm execute empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu '{"mint":{"token_id": "2", "owner": "empower1hywmhhy3jl7j7lpcghfjpsynmy9vrr0ne2009s", "token_uri": "www.example.com"}}' --from validator --yes --chain-id emp-devnet-1
Enter keyring passphrase (attempt 1/3):
code: 0
codespace: ""
data: ""
events: []
gas_used: "0"
gas_wanted: "0"
height: "0"
info: ""
logs: []
raw_log: '[]'
timestamp: ""
tx: null
txhash: CE08696B09F435903AA43FDBEDB84DF26310AC0A7201648013994CA8FDD584BA
root@dc4df2e3dafa:~# empowerd q wasm contract-state smart empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu '{"nft_info":{"token_id": "2"}}'
data:
  extension: null
  token_uri: www.example.com
root@dc4df2e3dafa:~# empowerd q wasm contract-state smart empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu '{"tokens":{"owner": "empower1hywmhhy3jl7j7lpcghfjpsynmy9vrr0ne2009s"}}'
data:
  tokens:
  - "2"
root@dc4df2e3dafa:~# empowerd q authz grats
Error: unknown command "grats" for "authz"

Did you mean this?
	grants

Usage:
  empowerd query authz [flags]
  empowerd query authz [command]

Available Commands:
  grants            query grants for a granter-grantee pair and optionally a msg-type-url
  grants-by-grantee query authorization grants granted to a grantee
  grants-by-granter query authorization grants granted by granter

Flags:
  -h, --help   help for authz

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

Use "empowerd query authz [command] --help" for more information about a command.

root@dc4df2e3dafa:~# empowerd q authz grants empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw empower1hywmhhy3jl7j7lpcghfjpsynmy9vrr0ne2009s
grants: []
pagination:
  next_key: null
  total: "0"
root@dc4df2e3dafa:~# empowerd tx authz                                                                                                    
Authorize and revoke access to execute transactions on behalf of your address

Usage:
  empowerd tx authz [flags]
  empowerd tx authz [command]

Available Commands:
  exec        execute tx on behalf of granter account
  grant       Grant authorization to an address
  revoke      revoke authorization

Flags:
  -h, --help   help for authz

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

Use "empowerd tx authz [command] --help" for more information about a command.
root@dc4df2e3dafa:~# empowerd tx authz grant
Error: accepts 2 arg(s), received 0
Usage:
  empowerd tx authz grant <grantee> <authorization_type="send"|"generic"|"delegate"|"unbond"|"redelegate"> --from <granter> [flags]

Flags:
  -a, --account-number uint          The account number of the signing account (offline mode only)
      --allow-list strings           Allowed addresses grantee is allowed to send funds separated by ,
      --allowed-validators strings   Allowed validators addresses separated by ,
      --aux                          Generate aux signer data instead of sending a tx
  -b, --broadcast-mode string        Transaction broadcasting mode (sync|async) (default "sync")
      --chain-id string              The network chain ID
      --deny-validators strings      Deny validators addresses separated by ,
      --dry-run                      ignore the --gas flag and perform a simulation of a transaction, but don't broadcast it (when enabled, the local Keybase is not accessible)
      --expiration int               Expire time as Unix timestamp. Set zero (0) for no expiry. Default is 0.
      --fee-granter string           Fee granter grants fees for the transaction
      --fee-payer string             Fee payer pays fees for the transaction instead of deducting from the signer
      --fees string                  Fees to pay along with transaction; eg: 10uatom
      --from string                  Name or address of private key with which to sign
      --gas string                   gas limit to set per-transaction; set to "auto" to calculate sufficient gas automatically. Note: "auto" option doesn't always report accurate results. Set a valid coin value to adjust the result. Can be used instead of "fees". (default 200000)
      --gas-adjustment float         adjustment factor to be multiplied against the estimate returned by the tx simulation; if the gas limit is set manually this flag is ignored  (default 1)
      --gas-prices string            Gas prices in decimal format to determine the transaction fee (e.g. 0.1uatom)
      --generate-only                Build an unsigned transaction and write it to STDOUT (when enabled, the local Keybase only accessed when providing a key name)
  -h, --help                         help for grant
      --keyring-backend string       Select keyring's backend (os|file|kwallet|pass|test|memory) (default "os")
      --keyring-dir string           The client Keyring directory; if omitted, the default 'home' directory will be used
      --ledger                       Use a connected Ledger device
      --msg-type string              The Msg method name for which we are creating a GenericAuthorization
      --node string                  <host>:<port> to tendermint rpc interface for this chain (default "tcp://localhost:26657")
      --note string                  Note to add a description to the transaction (previously --memo)
      --offline                      Offline mode (does not allow any online functionality)
  -o, --output string                Output format (text|json) (default "json")
  -s, --sequence uint                The sequence number of the signing account (offline mode only)
      --sign-mode string             Choose sign mode (direct|amino-json|direct-aux), this is an advanced feature
      --spend-limit string           SpendLimit for Send Authorization, an array of Coins allowed spend
      --timeout-height uint          Set a block timeout height to prevent the tx from being committed past a certain height
      --tip string                   Tip is the amount that is going to be transferred to the fee payer on the target chain. This flag is only valid when used with --aux, and is ignored if the target chain didn't enable the TipDecorator
  -y, --yes                          Skip tx broadcasting prompt confirmation

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

root@dc4df2e3dafa:~# empowerd tx authz grant empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw send --from empower1hywmhhy3jl7j7lpcghfjpsynmy9vrr0ne2009s
Enter keyring passphrase (attempt 1/3):
Error: spend-limit should be greater than zero
Usage:
  empowerd tx authz grant <grantee> <authorization_type="send"|"generic"|"delegate"|"unbond"|"redelegate"> --from <granter> [flags]

Flags:
  -a, --account-number uint          The account number of the signing account (offline mode only)
      --allow-list strings           Allowed addresses grantee is allowed to send funds separated by ,
      --allowed-validators strings   Allowed validators addresses separated by ,
      --aux                          Generate aux signer data instead of sending a tx
  -b, --broadcast-mode string        Transaction broadcasting mode (sync|async) (default "sync")
      --chain-id string              The network chain ID
      --deny-validators strings      Deny validators addresses separated by ,
      --dry-run                      ignore the --gas flag and perform a simulation of a transaction, but don't broadcast it (when enabled, the local Keybase is not accessible)
      --expiration int               Expire time as Unix timestamp. Set zero (0) for no expiry. Default is 0.
      --fee-granter string           Fee granter grants fees for the transaction
      --fee-payer string             Fee payer pays fees for the transaction instead of deducting from the signer
      --fees string                  Fees to pay along with transaction; eg: 10uatom
      --from string                  Name or address of private key with which to sign
      --gas string                   gas limit to set per-transaction; set to "auto" to calculate sufficient gas automatically. Note: "auto" option doesn't always report accurate results. Set a valid coin value to adjust the result. Can be used instead of "fees". (default 200000)
      --gas-adjustment float         adjustment factor to be multiplied against the estimate returned by the tx simulation; if the gas limit is set manually this flag is ignored  (default 1)
      --gas-prices string            Gas prices in decimal format to determine the transaction fee (e.g. 0.1uatom)
      --generate-only                Build an unsigned transaction and write it to STDOUT (when enabled, the local Keybase only accessed when providing a key name)
  -h, --help                         help for grant
      --keyring-backend string       Select keyring's backend (os|file|kwallet|pass|test|memory) (default "os")
      --keyring-dir string           The client Keyring directory; if omitted, the default 'home' directory will be used
      --ledger                       Use a connected Ledger device
      --msg-type string              The Msg method name for which we are creating a GenericAuthorization
      --node string                  <host>:<port> to tendermint rpc interface for this chain (default "tcp://localhost:26657")
      --note string                  Note to add a description to the transaction (previously --memo)
      --offline                      Offline mode (does not allow any online functionality)
  -o, --output string                Output format (text|json) (default "json")
  -s, --sequence uint                The sequence number of the signing account (offline mode only)
      --sign-mode string             Choose sign mode (direct|amino-json|direct-aux), this is an advanced feature
      --spend-limit string           SpendLimit for Send Authorization, an array of Coins allowed spend
      --timeout-height uint          Set a block timeout height to prevent the tx from being committed past a certain height
      --tip string                   Tip is the amount that is going to be transferred to the fee payer on the target chain. This flag is only valid when used with --aux, and is ignored if the target chain didn't enable the TipDecorator
  -y, --yes                          Skip tx broadcasting prompt confirmation

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

root@dc4df2e3dafa:~# empowerd tx authz grant empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw send --spend-limit=100stake --from empower1hywmhhy3jl7j7lpcghfjpsynmy9vrr0ne2009s
Enter keyring passphrase (attempt 1/3):
Error: rpc error: code = NotFound desc = rpc error: code = NotFound desc = account empower1hywmhhy3jl7j7lpcghfjpsynmy9vrr0ne2009s not found: key not found
Usage:
  empowerd tx authz grant <grantee> <authorization_type="send"|"generic"|"delegate"|"unbond"|"redelegate"> --from <granter> [flags]

Flags:
  -a, --account-number uint          The account number of the signing account (offline mode only)
      --allow-list strings           Allowed addresses grantee is allowed to send funds separated by ,
      --allowed-validators strings   Allowed validators addresses separated by ,
      --aux                          Generate aux signer data instead of sending a tx
  -b, --broadcast-mode string        Transaction broadcasting mode (sync|async) (default "sync")
      --chain-id string              The network chain ID
      --deny-validators strings      Deny validators addresses separated by ,
      --dry-run                      ignore the --gas flag and perform a simulation of a transaction, but don't broadcast it (when enabled, the local Keybase is not accessible)
      --expiration int               Expire time as Unix timestamp. Set zero (0) for no expiry. Default is 0.
      --fee-granter string           Fee granter grants fees for the transaction
      --fee-payer string             Fee payer pays fees for the transaction instead of deducting from the signer
      --fees string                  Fees to pay along with transaction; eg: 10uatom
      --from string                  Name or address of private key with which to sign
      --gas string                   gas limit to set per-transaction; set to "auto" to calculate sufficient gas automatically. Note: "auto" option doesn't always report accurate results. Set a valid coin value to adjust the result. Can be used instead of "fees". (default 200000)
      --gas-adjustment float         adjustment factor to be multiplied against the estimate returned by the tx simulation; if the gas limit is set manually this flag is ignored  (default 1)
      --gas-prices string            Gas prices in decimal format to determine the transaction fee (e.g. 0.1uatom)
      --generate-only                Build an unsigned transaction and write it to STDOUT (when enabled, the local Keybase only accessed when providing a key name)
  -h, --help                         help for grant
      --keyring-backend string       Select keyring's backend (os|file|kwallet|pass|test|memory) (default "os")
      --keyring-dir string           The client Keyring directory; if omitted, the default 'home' directory will be used
      --ledger                       Use a connected Ledger device
      --msg-type string              The Msg method name for which we are creating a GenericAuthorization
      --node string                  <host>:<port> to tendermint rpc interface for this chain (default "tcp://localhost:26657")
      --note string                  Note to add a description to the transaction (previously --memo)
      --offline                      Offline mode (does not allow any online functionality)
  -o, --output string                Output format (text|json) (default "json")
  -s, --sequence uint                The sequence number of the signing account (offline mode only)
      --sign-mode string             Choose sign mode (direct|amino-json|direct-aux), this is an advanced feature
      --spend-limit string           SpendLimit for Send Authorization, an array of Coins allowed spend
      --timeout-height uint          Set a block timeout height to prevent the tx from being committed past a certain height
      --tip string                   Tip is the amount that is going to be transferred to the fee payer on the target chain. This flag is only valid when used with --aux, and is ignored if the target chain didn't enable the TipDecorator
  -y, --yes                          Skip tx broadcasting prompt confirmation

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

root@dc4df2e3dafa:~# empowerd keys list
Enter keyring passphrase (attempt 1/3):
- address: empower1hywmhhy3jl7j7lpcghfjpsynmy9vrr0ne2009s
  name: issuer
  pubkey: '{"@type":"/cosmos.crypto.secp256k1.PubKey","key":"AiQwEKhQQQHrbTyQQNlMZIX3j86SOgoOo8hXGrpi4aIx"}'
  type: local
- address: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  name: validator
  pubkey: '{"@type":"/cosmos.crypto.secp256k1.PubKey","key":"A9XKI69h2nvYM89MfPdKr3nWv1NHsDSqXla7aW0mhvUX"}'
  type: local

root@dc4df2e3dafa:~# empowerd tx authz grant empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw send --spend-limit=100stake --from empower1hywmhhy3jl7j7lpcghfjpsynmy9vrr0ne2009s
Enter keyring passphrase (attempt 1/3):
password must be at least 8 characters
Enter keyring passphrase (attempt 2/3):
Error: rpc error: code = NotFound desc = rpc error: code = NotFound desc = account empower1hywmhhy3jl7j7lpcghfjpsynmy9vrr0ne2009s not found: key not found
Usage:
  empowerd tx authz grant <grantee> <authorization_type="send"|"generic"|"delegate"|"unbond"|"redelegate"> --from <granter> [flags]

Flags:
  -a, --account-number uint          The account number of the signing account (offline mode only)
      --allow-list strings           Allowed addresses grantee is allowed to send funds separated by ,
      --allowed-validators strings   Allowed validators addresses separated by ,
      --aux                          Generate aux signer data instead of sending a tx
  -b, --broadcast-mode string        Transaction broadcasting mode (sync|async) (default "sync")
      --chain-id string              The network chain ID
      --deny-validators strings      Deny validators addresses separated by ,
      --dry-run                      ignore the --gas flag and perform a simulation of a transaction, but don't broadcast it (when enabled, the local Keybase is not accessible)
      --expiration int               Expire time as Unix timestamp. Set zero (0) for no expiry. Default is 0.
      --fee-granter string           Fee granter grants fees for the transaction
      --fee-payer string             Fee payer pays fees for the transaction instead of deducting from the signer
      --fees string                  Fees to pay along with transaction; eg: 10uatom
      --from string                  Name or address of private key with which to sign
      --gas string                   gas limit to set per-transaction; set to "auto" to calculate sufficient gas automatically. Note: "auto" option doesn't always report accurate results. Set a valid coin value to adjust the result. Can be used instead of "fees". (default 200000)
      --gas-adjustment float         adjustment factor to be multiplied against the estimate returned by the tx simulation; if the gas limit is set manually this flag is ignored  (default 1)
      --gas-prices string            Gas prices in decimal format to determine the transaction fee (e.g. 0.1uatom)
      --generate-only                Build an unsigned transaction and write it to STDOUT (when enabled, the local Keybase only accessed when providing a key name)
  -h, --help                         help for grant
      --keyring-backend string       Select keyring's backend (os|file|kwallet|pass|test|memory) (default "os")
      --keyring-dir string           The client Keyring directory; if omitted, the default 'home' directory will be used
      --ledger                       Use a connected Ledger device
      --msg-type string              The Msg method name for which we are creating a GenericAuthorization
      --node string                  <host>:<port> to tendermint rpc interface for this chain (default "tcp://localhost:26657")
      --note string                  Note to add a description to the transaction (previously --memo)
      --offline                      Offline mode (does not allow any online functionality)
  -o, --output string                Output format (text|json) (default "json")
  -s, --sequence uint                The sequence number of the signing account (offline mode only)
      --sign-mode string             Choose sign mode (direct|amino-json|direct-aux), this is an advanced feature
      --spend-limit string           SpendLimit for Send Authorization, an array of Coins allowed spend
      --timeout-height uint          Set a block timeout height to prevent the tx from being committed past a certain height
      --tip string                   Tip is the amount that is going to be transferred to the fee payer on the target chain. This flag is only valid when used with --aux, and is ignored if the target chain didn't enable the TipDecorator
  -y, --yes                          Skip tx broadcasting prompt confirmation

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

root@dc4df2e3dafa:~# empowerd keys list
Enter keyring passphrase (attempt 1/3):
- address: empower1hywmhhy3jl7j7lpcghfjpsynmy9vrr0ne2009s
  name: issuer
  pubkey: '{"@type":"/cosmos.crypto.secp256k1.PubKey","key":"AiQwEKhQQQHrbTyQQNlMZIX3j86SOgoOo8hXGrpi4aIx"}'
  type: local
- address: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  name: validator
  pubkey: '{"@type":"/cosmos.crypto.secp256k1.PubKey","key":"A9XKI69h2nvYM89MfPdKr3nWv1NHsDSqXla7aW0mhvUX"}'
  type: local

root@dc4df2e3dafa:~# empowerd tx wasm execute empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu '{"mint":{"token_id": "5", "owner": "empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw", "token_uri": "www.example.com"}}' --from validator --yes --chain-id emp-devnet-1
Enter keyring passphrase (attempt 1/3):
code: 0
codespace: ""
data: ""
events: []
gas_used: "0"
gas_wanted: "0"
height: "0"
info: ""
logs: []
raw_log: '[]'
timestamp: ""
tx: null
txhash: D81D52DB8E8E639757FBD25A996079F090FC1C51F97F848F8F1028E29FF129B0
root@dc4df2e3dafa:~# empowerd tx wasm execute empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu '{"mint":{"token_id": "10", "owner": "empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw", "token_uri": "www.example.com"}}' --from validator --yes --chain-id emp-devnet-1
Enter keyring passphrase (attempt 1/3):
code: 0
codespace: ""
data: ""
events: []
gas_used: "0"
gas_wanted: "0"
height: "0"
info: ""
logs: []
raw_log: '[]'
timestamp: ""
tx: null
txhash: 9FA0ED1928A49A21ADA85A04BE3E2C51181932B67F8341688C496B92C37C74AB
root@dc4df2e3dafa:~# ^C
root@dc4df2e3dafa:~# empowerd tx
Transactions subcommands

Usage:
  empowerd tx [flags]
  empowerd tx [command]

Available Commands:
  authz               Authorization transactions subcommands
  aux-to-fee          Includes the aux signer data in the tx, broadcast the tx, and sends the tip amount to the broadcaster
  bank                Bank transaction subcommands
  broadcast           Broadcast transactions generated offline
  certificates        certificates transactions subcommands
  crisis              Crisis transactions subcommands
  decode              Decode a binary encoded transaction string
  distribution        Distribution transactions subcommands
  encode              Encode transactions generated offline
  evidence            Evidence transaction subcommands
  feegrant            Feegrant transactions subcommands
  gov                 Governance transactions subcommands
  group               Group transaction subcommands
  ibc                 IBC transaction subcommands
  ibc-fee             IBC relayer incentivization transaction subcommands
  ibc-transfer        IBC fungible token transfer transaction subcommands
  interchain-accounts IBC interchain accounts transaction subcommands
  multi-sign          Generate multisig signatures for transactions generated offline
  multisign-batch     Assemble multisig transactions in batch from batch signatures
  plasticcredit       plasticcredit transactions subcommands
  proofofexistence    proofofexistence transactions subcommands
  sign                Sign a transaction generated offline
  sign-batch          Sign transaction batch files
  slashing            Slashing transaction subcommands
  staking             Staking transaction subcommands
  validate-signatures validate transactions signatures
  vesting             Vesting transaction subcommands
  wasm                Wasm transaction subcommands

Flags:
  -h, --help   help for tx

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

Additional help topics:
  empowerd tx upgrade    Upgrade transaction subcommands

Use "empowerd tx [command] --help" for more information about a command.
root@dc4df2e3dafa:~# empowerd tx wasm
Wasm transaction subcommands

Usage:
  empowerd tx wasm [flags]
  empowerd tx wasm [command]

Available Commands:
  clear-contract-admin      Clears admin for a contract to prevent further migrations
  execute                   Execute a command on a wasm contract
  grant                     Grant a authz permission
  instantiate               Instantiate a wasm contract
  instantiate2              Instantiate a wasm contract with predictable address
  migrate                   Migrate a wasm contract to a new code version
  set-contract-admin        Set new admin for a contract
  set-contract-label        Set new label for a contract
  store                     Upload a wasm binary
  submit-proposal           Submit a wasm proposal.
  update-instantiate-config Update instantiate config for a codeID

Flags:
  -h, --help   help for wasm

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

Use "empowerd tx wasm [command] --help" for more information about a command.
root@dc4df2e3dafa:~# empowerd tx
Transactions subcommands

Usage:
  empowerd tx [flags]
  empowerd tx [command]

Available Commands:
  authz               Authorization transactions subcommands
  aux-to-fee          Includes the aux signer data in the tx, broadcast the tx, and sends the tip amount to the broadcaster
  bank                Bank transaction subcommands
  broadcast           Broadcast transactions generated offline
  certificates        certificates transactions subcommands
  crisis              Crisis transactions subcommands
  decode              Decode a binary encoded transaction string
  distribution        Distribution transactions subcommands
  encode              Encode transactions generated offline
  evidence            Evidence transaction subcommands
  feegrant            Feegrant transactions subcommands
  gov                 Governance transactions subcommands
  group               Group transaction subcommands
  ibc                 IBC transaction subcommands
  ibc-fee             IBC relayer incentivization transaction subcommands
  ibc-transfer        IBC fungible token transfer transaction subcommands
  interchain-accounts IBC interchain accounts transaction subcommands
  multi-sign          Generate multisig signatures for transactions generated offline
  multisign-batch     Assemble multisig transactions in batch from batch signatures
  plasticcredit       plasticcredit transactions subcommands
  proofofexistence    proofofexistence transactions subcommands
  sign                Sign a transaction generated offline
  sign-batch          Sign transaction batch files
  slashing            Slashing transaction subcommands
  staking             Staking transaction subcommands
  validate-signatures validate transactions signatures
  vesting             Vesting transaction subcommands
  wasm                Wasm transaction subcommands

Flags:
  -h, --help   help for tx

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

Additional help topics:
  empowerd tx upgrade    Upgrade transaction subcommands

Use "empowerd tx [command] --help" for more information about a command.
root@dc4df2e3dafa:~# empowerd tx authz query
Error: unknown command "query" for "authz"
Usage:
  empowerd tx authz [flags]
  empowerd tx authz [command]

Available Commands:
  exec        execute tx on behalf of granter account
  grant       Grant authorization to an address
  revoke      revoke authorization

Flags:
  -h, --help   help for authz

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

Use "empowerd tx authz [command] --help" for more information about a command.

root@dc4df2e3dafa:~# empowerd q authz      
Querying commands for the authz module

Usage:
  empowerd query authz [flags]
  empowerd query authz [command]

Available Commands:
  grants            query grants for a granter-grantee pair and optionally a msg-type-url
  grants-by-grantee query authorization grants granted to a grantee
  grants-by-granter query authorization grants granted by granter

Flags:
  -h, --help   help for authz

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

Use "empowerd query authz [command] --help" for more information about a command.
root@dc4df2e3dafa:~# empowerd q authz grants
Error: accepts between 2 and 3 arg(s), received 0
Usage:
  empowerd query authz grants [granter-addr] [grantee-addr] [msg-type-url]? [flags]

Flags:
      --count-total        count total number of records in grants to query for
      --grpc-addr string   the gRPC endpoint to use for this chain
      --grpc-insecure      allow gRPC over insecure channels, if not TLS the server must use TLS
      --height int         Use a specific height to query state at (this can error if the node is pruning state)
  -h, --help               help for grants
      --limit uint         pagination limit of grants to query for (default 100)
      --node string        <host>:<port> to Tendermint RPC interface for this chain (default "tcp://localhost:26657")
      --offset uint        pagination offset of grants to query for
  -o, --output string      Output format (text|json) (default "text")
      --page uint          pagination page of grants to query for. This sets offset to a multiple of limit (default 1)
      --page-key string    pagination page-key of grants to query for
      --reverse            results are sorted in descending order

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

root@dc4df2e3dafa:~# empowerd q authz grants /empowerchain.plasticcredit.TransferAuthorization
Error: accepts between 2 and 3 arg(s), received 1
Usage:
  empowerd query authz grants [granter-addr] [grantee-addr] [msg-type-url]? [flags]

Flags:
      --count-total        count total number of records in grants to query for
      --grpc-addr string   the gRPC endpoint to use for this chain
      --grpc-insecure      allow gRPC over insecure channels, if not TLS the server must use TLS
      --height int         Use a specific height to query state at (this can error if the node is pruning state)
  -h, --help               help for grants
      --limit uint         pagination limit of grants to query for (default 100)
      --node string        <host>:<port> to Tendermint RPC interface for this chain (default "tcp://localhost:26657")
      --offset uint        pagination offset of grants to query for
  -o, --output string      Output format (text|json) (default "text")
      --page uint          pagination page of grants to query for. This sets offset to a multiple of limit (default 1)
      --page-key string    pagination page-key of grants to query for
      --reverse            results are sorted in descending order

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

root@dc4df2e3dafa:~# empowerd q authz grants
Error: accepts between 2 and 3 arg(s), received 0
Usage:
  empowerd query authz grants [granter-addr] [grantee-addr] [msg-type-url]? [flags]

Flags:
      --count-total        count total number of records in grants to query for
      --grpc-addr string   the gRPC endpoint to use for this chain
      --grpc-insecure      allow gRPC over insecure channels, if not TLS the server must use TLS
      --height int         Use a specific height to query state at (this can error if the node is pruning state)
  -h, --help               help for grants
      --limit uint         pagination limit of grants to query for (default 100)
      --node string        <host>:<port> to Tendermint RPC interface for this chain (default "tcp://localhost:26657")
      --offset uint        pagination offset of grants to query for
  -o, --output string      Output format (text|json) (default "text")
      --page uint          pagination page of grants to query for. This sets offset to a multiple of limit (default 1)
      --page-key string    pagination page-key of grants to query for
      --reverse            results are sorted in descending order

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

root@dc4df2e3dafa:~# empowerd q authz
Querying commands for the authz module

Usage:
  empowerd query authz [flags]
  empowerd query authz [command]

Available Commands:
  grants            query grants for a granter-grantee pair and optionally a msg-type-url
  grants-by-grantee query authorization grants granted to a grantee
  grants-by-granter query authorization grants granted by granter

Flags:
  -h, --help   help for authz

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

Use "empowerd query authz [command] --help" for more information about a command.
root@dc4df2e3dafa:~# empowerd q authz grants-by-granter
Error: accepts 1 arg(s), received 0
Usage:
  empowerd query authz grants-by-granter [granter-addr] [flags]

Flags:
      --count-total        count total number of records in granter-grants to query for
      --grpc-addr string   the gRPC endpoint to use for this chain
      --grpc-insecure      allow gRPC over insecure channels, if not TLS the server must use TLS
      --height int         Use a specific height to query state at (this can error if the node is pruning state)
  -h, --help               help for grants-by-granter
      --limit uint         pagination limit of granter-grants to query for (default 100)
      --node string        <host>:<port> to Tendermint RPC interface for this chain (default "tcp://localhost:26657")
      --offset uint        pagination offset of granter-grants to query for
  -o, --output string      Output format (text|json) (default "text")
      --page uint          pagination page of granter-grants to query for. This sets offset to a multiple of limit (default 1)
      --page-key string    pagination page-key of granter-grants to query for
      --reverse            results are sorted in descending order

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

root@dc4df2e3dafa:~# empowerd q authz grants-by-granter empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
HALLOOOOOOO
grants:
- authorization:
    '@type': /empowerchain.plasticcredit.TransferAuthorization
    denom: PCRD/00710LPVHVM3WGX000000115
    max_credits: "1"
  expiration: null
  grantee: empower1hywmhhy3jl7j7lpcghfjpsynmy9vrr0ne2009s
  granter: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
pagination:
  next_key: null
  total: "0"
bash: HALLOOOOOOO: command not found
root@dc4df2e3dafa:~# empowerd tx pc create-applicant alex test --chain-id emp-devnet-1 --from empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw -y
Enter keyring passphrase (attempt 1/3):
code: 0
codespace: ""
data: ""
events: []
gas_used: "0"
gas_wanted: "0"
height: "0"
info: ""
logs: []
raw_log: '[]'
timestamp: ""
tx: null
txhash: E3B1FDC0E02B3972CB6E4F05926D8F4ED71139ABCBA796074BA2C4ADD6012D25
root@dc4df2e3dafa:~# empowerd tx pc create-project 4 PTEST pickers --chain-id emp-devnet-1 --from empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw -y
Enter keyring passphrase (attempt 1/3):
password must be at least 8 characters
Enter keyring passphrase (attempt 2/3):
code: 0
codespace: ""
data: ""
events: []
gas_used: "0"
gas_wanted: "0"
height: "0"
info: ""
logs: []
raw_log: '[]'
timestamp: ""
tx: null
txhash: 689610237CDEAE6A0ABBFBF30073D96D288BB030357357546B41E3BD4929BD41
root@dc4df2e3dafa:~# empowerd q tx 689610237CDEAE6A0ABBFBF30073D96D288BB030357357546B41E3BD4929BD41
code: 0
codespace: ""
data: 123A0A342F656D706F776572636861696E2E706C61737469636372656469742E4D736743726561746550726F6A656374526573706F6E73651202080D
events:
- attributes:
  - index: true
    key: fee
    value: ""
  - index: true
    key: fee_payer
    value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  type: tx
- attributes:
  - index: true
    key: acc_seq
    value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw/25
  type: tx
- attributes:
  - index: true
    key: signature
    value: d5ksH0fzdkTMzm1zodx6/1RxGr4AaoGdYGHwERuBttJ6WX6LmJ1r3972LxL7bjhZSuvn0iFFQ+cIyZZmGAXI6Q==
  type: tx
- attributes:
  - index: true
    key: action
    value: /empowerchain.plasticcredit.MsgCreateProject
  - index: true
    key: sender
    value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  - index: true
    key: module
    value: plasticcredit
  type: message
- attributes:
  - index: true
    key: applicant_id
    value: '"4"'
  - index: true
    key: creator
    value: '"empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw"'
  - index: true
    key: credit_type_abbreviation
    value: '"PTEST"'
  - index: true
    key: name
    value: '"pickers"'
  - index: true
    key: project_id
    value: '"13"'
  type: empowerchain.plasticcredit.EventCreateProject
gas_used: "37077"
gas_wanted: "200000"
height: "3315"
info: ""
logs:
- events:
  - attributes:
    - key: action
      value: /empowerchain.plasticcredit.MsgCreateProject
    - key: sender
      value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
    - key: module
      value: plasticcredit
    type: message
  - attributes:
    - key: applicant_id
      value: '"4"'
    - key: creator
      value: '"empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw"'
    - key: credit_type_abbreviation
      value: '"PTEST"'
    - key: name
      value: '"pickers"'
    - key: project_id
      value: '"13"'
    type: empowerchain.plasticcredit.EventCreateProject
  log: ""
  msg_index: 0
raw_log: '[{"msg_index":0,"events":[{"type":"message","attributes":[{"key":"action","value":"/empowerchain.plasticcredit.MsgCreateProject"},{"key":"sender","value":"empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw"},{"key":"module","value":"plasticcredit"}]},{"type":"empowerchain.plasticcredit.EventCreateProject","attributes":[{"key":"applicant_id","value":"\"4\""},{"key":"creator","value":"\"empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw\""},{"key":"credit_type_abbreviation","value":"\"PTEST\""},{"key":"name","value":"\"pickers\""},{"key":"project_id","value":"\"13\""}]}]}]'
timestamp: "2024-01-06T05:58:25Z"
tx:
  '@type': /cosmos.tx.v1beta1.Tx
  auth_info:
    fee:
      amount: []
      gas_limit: "200000"
      granter: ""
      payer: ""
    signer_infos:
    - mode_info:
        single:
          mode: SIGN_MODE_DIRECT
      public_key:
        '@type': /cosmos.crypto.secp256k1.PubKey
        key: A9XKI69h2nvYM89MfPdKr3nWv1NHsDSqXla7aW0mhvUX
      sequence: "25"
    tip: null
  body:
    extension_options: []
    memo: ""
    messages:
    - '@type': /empowerchain.plasticcredit.MsgCreateProject
      applicant_id: "4"
      creator: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
      credit_type_abbreviation: PTEST
      name: pickers
    non_critical_extension_options: []
    timeout_height: "0"
  signatures:
  - d5ksH0fzdkTMzm1zodx6/1RxGr4AaoGdYGHwERuBttJ6WX6LmJ1r3972LxL7bjhZSuvn0iFFQ+cIyZZmGAXI6Q==
txhash: 689610237CDEAE6A0ABBFBF30073D96D288BB030357357546B41E3BD4929BD41
root@dc4df2e3dafa:~# empowerd tx pc approve-project 12 --chain-id emp-devnet-1 --from empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
Enter keyring passphrase (attempt 1/3):
auth_info:
  fee:
    amount: []
    gas_limit: "200000"
    granter: ""
    payer: ""
  signer_infos: []
  tip: null
body:
  extension_options: []
  memo: ""
  messages:
  - '@type': /empowerchain.plasticcredit.MsgApproveProject
    approver: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
    project_id: "12"
  non_critical_extension_options: []
  timeout_height: "0"
signatures: []
confirm transaction before signing and broadcasting [y/N]: y
code: 0
codespace: ""
data: ""
events: []
gas_used: "0"
gas_wanted: "0"
height: "0"
info: ""
logs: []
raw_log: '[]'
timestamp: ""
tx: null
txhash: B99FE0A33F54009CF205973D377208BF5EF3388528BAD145FCDC2BA91610D96D
root@dc4df2e3dafa:~# empowerd q tx B99FE0A33F54009CF205973D377208BF5EF3388528BAD145FCDC2BA91610D96D
code: 4
codespace: sdk
data: ""
events:
- attributes:
  - index: true
    key: fee
    value: ""
  - index: true
    key: fee_payer
    value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  type: tx
- attributes:
  - index: true
    key: acc_seq
    value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw/26
  type: tx
- attributes:
  - index: true
    key: signature
    value: CWXTYBmBxCSqIPG5KdL2MPEdm9HMQluxVKvd3VExBDZhWVQ5PXfuhyGl9yK5dNvnZKDstXeYWjByw6XZVmpy3g==
  type: tx
gas_used: "31976"
gas_wanted: "200000"
height: "3339"
info: ""
logs: []
raw_log: 'failed to execute message; message index: 0: approver empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  does not have authorization on issuer with id 2: unauthorized'
timestamp: "2024-01-06T06:00:26Z"
tx:
  '@type': /cosmos.tx.v1beta1.Tx
  auth_info:
    fee:
      amount: []
      gas_limit: "200000"
      granter: ""
      payer: ""
    signer_infos:
    - mode_info:
        single:
          mode: SIGN_MODE_DIRECT
      public_key:
        '@type': /cosmos.crypto.secp256k1.PubKey
        key: A9XKI69h2nvYM89MfPdKr3nWv1NHsDSqXla7aW0mhvUX
      sequence: "26"
    tip: null
  body:
    extension_options: []
    memo: ""
    messages:
    - '@type': /empowerchain.plasticcredit.MsgApproveProject
      approver: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
      project_id: "12"
    non_critical_extension_options: []
    timeout_height: "0"
  signatures:
  - CWXTYBmBxCSqIPG5KdL2MPEdm9HMQluxVKvd3VExBDZhWVQ5PXfuhyGl9yK5dNvnZKDstXeYWjByw6XZVmpy3g==
txhash: B99FE0A33F54009CF205973D377208BF5EF3388528BAD145FCDC2BA91610D96D
root@dc4df2e3dafa:~# empowerd keys add issuer --recover                                                                                                                                                           
Enter keyring passphrase (attempt 1/3):
override the existing name issuer [y/N]: y
> Enter your bip39 mnemonic
6be393b5006e01cf67cf53f37a84d7c58baa32a2d03a008a882a9dace6939f9e
Error: invalid mnemonic
Usage:
  empowerd keys add <name> [flags]

Flags:
      --account uint32           Account number for HD derivation (less than equal 2147483647)
      --coin-type uint32         coin type number for HD derivation (default 118)
      --dry-run                  Perform action, but don't add key to local keystore
      --hd-path string           Manual HD Path derivation (overrides BIP44 config)
  -h, --help                     help for add
      --index uint32             Address index number for HD derivation (less than equal 2147483647)
  -i, --interactive              Interactively prompt user for BIP39 passphrase and mnemonic
      --key-type string          Key signing algorithm to generate keys for (default "secp256k1")
      --ledger                   Store a local reference to a private key on a Ledger device
      --multisig strings         List of key names stored in keyring to construct a public legacy multisig key
      --multisig-threshold int   K out of N required signatures. For use in conjunction with --multisig (default 1)
      --no-backup                Don't print out seed phrase (if others are watching the terminal)
      --nosort                   Keys passed to --multisig are taken in the order they're supplied
      --pubkey string            Parse a public key in JSON format and saves key info to <name> file.
      --recover                  Provide seed phrase to recover existing key instead of creating

Global Flags:
      --home string              The application home directory (default "/root/.empowerchain")
      --keyring-backend string   Select keyring's backend (os|file|kwallet|pass|test|memory) (default "os")
      --keyring-dir string       The client Keyring directory; if omitted, the default 'home' directory will be used
      --log_format string        The logging format (json|plain) (default "plain")
      --log_level string         The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --output string            Output format (text|json) (default "text")
      --trace                    print out full stack trace on errors

root@dc4df2e3dafa:~# empowerd keys list
Enter keyring passphrase (attempt 1/3):
- address: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  name: validator
  pubkey: '{"@type":"/cosmos.crypto.secp256k1.PubKey","key":"A9XKI69h2nvYM89MfPdKr3nWv1NHsDSqXla7aW0mhvUX"}'
  type: local

root@dc4df2e3dafa:~# empowerd keys add test
Enter keyring passphrase (attempt 1/3):

- address: empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw
  name: test
  pubkey: '{"@type":"/cosmos.crypto.secp256k1.PubKey","key":"Aj1mH8rGkKaKtix9jFgjRqhqSrOieyul2NzGbZkASZKR"}'
  type: local


**Important** write this mnemonic phrase in a safe place.
It is the only way to recover your account if you ever forget your password.

ignore fence mammal weasel middle primary trust pilot avocado rude either romance pistol inmate pen soon kiwi gift dolphin pioneer remind roast replace finish
root@dc4df2e3dafa:~# empowerd keys list
Enter keyring passphrase (attempt 1/3):
- address: empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw
  name: test
  pubkey: '{"@type":"/cosmos.crypto.secp256k1.PubKey","key":"Aj1mH8rGkKaKtix9jFgjRqhqSrOieyul2NzGbZkASZKR"}'
  type: local
- address: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  name: validator
  pubkey: '{"@type":"/cosmos.crypto.secp256k1.PubKey","key":"A9XKI69h2nvYM89MfPdKr3nWv1NHsDSqXla7aW0mhvUX"}'
  type: local

root@dc4df2e3dafa:~# empowerd tx send
Error: unknown command "send" for "tx"
Usage:
  empowerd tx [flags]
  empowerd tx [command]

Available Commands:
  authz               Authorization transactions subcommands
  aux-to-fee          Includes the aux signer data in the tx, broadcast the tx, and sends the tip amount to the broadcaster
  bank                Bank transaction subcommands
  broadcast           Broadcast transactions generated offline
  certificates        certificates transactions subcommands
  crisis              Crisis transactions subcommands
  decode              Decode a binary encoded transaction string
  distribution        Distribution transactions subcommands
  encode              Encode transactions generated offline
  evidence            Evidence transaction subcommands
  feegrant            Feegrant transactions subcommands
  gov                 Governance transactions subcommands
  group               Group transaction subcommands
  ibc                 IBC transaction subcommands
  ibc-fee             IBC relayer incentivization transaction subcommands
  ibc-transfer        IBC fungible token transfer transaction subcommands
  interchain-accounts IBC interchain accounts transaction subcommands
  multi-sign          Generate multisig signatures for transactions generated offline
  multisign-batch     Assemble multisig transactions in batch from batch signatures
  plasticcredit       plasticcredit transactions subcommands
  proofofexistence    proofofexistence transactions subcommands
  sign                Sign a transaction generated offline
  sign-batch          Sign transaction batch files
  slashing            Slashing transaction subcommands
  staking             Staking transaction subcommands
  validate-signatures validate transactions signatures
  vesting             Vesting transaction subcommands
  wasm                Wasm transaction subcommands

Flags:
  -h, --help   help for tx

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

Additional help topics:
  empowerd tx upgrade    Upgrade transaction subcommands

Use "empowerd tx [command] --help" for more information about a command.

root@dc4df2e3dafa:~# empowerd tx bank
Bank transaction subcommands

Usage:
  empowerd tx bank [flags]
  empowerd tx bank [command]

Available Commands:
  multi-send  Send funds from one account to two or more accounts.
  send        Send funds from one account to another.

Flags:
  -h, --help   help for bank

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

Use "empowerd tx bank [command] --help" for more information about a command.
root@dc4df2e3dafa:~# empowerd tx bank send
Error: accepts 3 arg(s), received 0
Usage:
  empowerd tx bank send [from_key_or_address] [to_address] [amount] [flags]

Flags:
  -a, --account-number uint      The account number of the signing account (offline mode only)
      --aux                      Generate aux signer data instead of sending a tx
  -b, --broadcast-mode string    Transaction broadcasting mode (sync|async) (default "sync")
      --chain-id string          The network chain ID
      --dry-run                  ignore the --gas flag and perform a simulation of a transaction, but don't broadcast it (when enabled, the local Keybase is not accessible)
      --fee-granter string       Fee granter grants fees for the transaction
      --fee-payer string         Fee payer pays fees for the transaction instead of deducting from the signer
      --fees string              Fees to pay along with transaction; eg: 10uatom
      --from string              Name or address of private key with which to sign
      --gas string               gas limit to set per-transaction; set to "auto" to calculate sufficient gas automatically. Note: "auto" option doesn't always report accurate results. Set a valid coin value to adjust the result. Can be used instead of "fees". (default 200000)
      --gas-adjustment float     adjustment factor to be multiplied against the estimate returned by the tx simulation; if the gas limit is set manually this flag is ignored  (default 1)
      --gas-prices string        Gas prices in decimal format to determine the transaction fee (e.g. 0.1uatom)
      --generate-only            Build an unsigned transaction and write it to STDOUT (when enabled, the local Keybase only accessed when providing a key name)
  -h, --help                     help for send
      --keyring-backend string   Select keyring's backend (os|file|kwallet|pass|test|memory) (default "os")
      --keyring-dir string       The client Keyring directory; if omitted, the default 'home' directory will be used
      --ledger                   Use a connected Ledger device
      --node string              <host>:<port> to tendermint rpc interface for this chain (default "tcp://localhost:26657")
      --note string              Note to add a description to the transaction (previously --memo)
      --offline                  Offline mode (does not allow any online functionality)
  -o, --output string            Output format (text|json) (default "json")
  -s, --sequence uint            The sequence number of the signing account (offline mode only)
      --sign-mode string         Choose sign mode (direct|amino-json|direct-aux), this is an advanced feature
      --timeout-height uint      Set a block timeout height to prevent the tx from being committed past a certain height
      --tip string               Tip is the amount that is going to be transferred to the fee payer on the target chain. This flag is only valid when used with --aux, and is ignored if the target chain didn't enable the TipDecorator
  -y, --yes                      Skip tx broadcasting prompt confirmation

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

root@dc4df2e3dafa:~# empowerd keys list
Enter keyring passphrase (attempt 1/3):
- address: empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw
  name: test
  pubkey: '{"@type":"/cosmos.crypto.secp256k1.PubKey","key":"Aj1mH8rGkKaKtix9jFgjRqhqSrOieyul2NzGbZkASZKR"}'
  type: local
- address: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  name: validator
  pubkey: '{"@type":"/cosmos.crypto.secp256k1.PubKey","key":"A9XKI69h2nvYM89MfPdKr3nWv1NHsDSqXla7aW0mhvUX"}'
  type: local

root@dc4df2e3dafa:~# empowerd tx bank send empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw A9XKI69h2nvYM89MfPdKr3nWv1NHsDSqXla7aW0mhvUX 1000 --chain-id emp-devnet-1
Enter keyring passphrase (attempt 1/3):
Error: decoding bech32 failed: string not all lowercase or all uppercase
Usage:
  empowerd tx bank send [from_key_or_address] [to_address] [amount] [flags]

Flags:
  -a, --account-number uint      The account number of the signing account (offline mode only)
      --aux                      Generate aux signer data instead of sending a tx
  -b, --broadcast-mode string    Transaction broadcasting mode (sync|async) (default "sync")
      --chain-id string          The network chain ID
      --dry-run                  ignore the --gas flag and perform a simulation of a transaction, but don't broadcast it (when enabled, the local Keybase is not accessible)
      --fee-granter string       Fee granter grants fees for the transaction
      --fee-payer string         Fee payer pays fees for the transaction instead of deducting from the signer
      --fees string              Fees to pay along with transaction; eg: 10uatom
      --from string              Name or address of private key with which to sign
      --gas string               gas limit to set per-transaction; set to "auto" to calculate sufficient gas automatically. Note: "auto" option doesn't always report accurate results. Set a valid coin value to adjust the result. Can be used instead of "fees". (default 200000)
      --gas-adjustment float     adjustment factor to be multiplied against the estimate returned by the tx simulation; if the gas limit is set manually this flag is ignored  (default 1)
      --gas-prices string        Gas prices in decimal format to determine the transaction fee (e.g. 0.1uatom)
      --generate-only            Build an unsigned transaction and write it to STDOUT (when enabled, the local Keybase only accessed when providing a key name)
  -h, --help                     help for send
      --keyring-backend string   Select keyring's backend (os|file|kwallet|pass|test|memory) (default "os")
      --keyring-dir string       The client Keyring directory; if omitted, the default 'home' directory will be used
      --ledger                   Use a connected Ledger device
      --node string              <host>:<port> to tendermint rpc interface for this chain (default "tcp://localhost:26657")
      --note string              Note to add a description to the transaction (previously --memo)
      --offline                  Offline mode (does not allow any online functionality)
  -o, --output string            Output format (text|json) (default "json")
  -s, --sequence uint            The sequence number of the signing account (offline mode only)
      --sign-mode string         Choose sign mode (direct|amino-json|direct-aux), this is an advanced feature
      --timeout-height uint      Set a block timeout height to prevent the tx from being committed past a certain height
      --tip string               Tip is the amount that is going to be transferred to the fee payer on the target chain. This flag is only valid when used with --aux, and is ignored if the target chain didn't enable the TipDecorator
  -y, --yes                      Skip tx broadcasting prompt confirmation

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

root@dc4df2e3dafa:~# empowerd tx bank send empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw 1000 --chain-id emp-devnet-1
Enter keyring passphrase (attempt 1/3):
Error: invalid decimal coin expression: 1000
Usage:
  empowerd tx bank send [from_key_or_address] [to_address] [amount] [flags]

Flags:
  -a, --account-number uint      The account number of the signing account (offline mode only)
      --aux                      Generate aux signer data instead of sending a tx
  -b, --broadcast-mode string    Transaction broadcasting mode (sync|async) (default "sync")
      --chain-id string          The network chain ID
      --dry-run                  ignore the --gas flag and perform a simulation of a transaction, but don't broadcast it (when enabled, the local Keybase is not accessible)
      --fee-granter string       Fee granter grants fees for the transaction
      --fee-payer string         Fee payer pays fees for the transaction instead of deducting from the signer
      --fees string              Fees to pay along with transaction; eg: 10uatom
      --from string              Name or address of private key with which to sign
      --gas string               gas limit to set per-transaction; set to "auto" to calculate sufficient gas automatically. Note: "auto" option doesn't always report accurate results. Set a valid coin value to adjust the result. Can be used instead of "fees". (default 200000)
      --gas-adjustment float     adjustment factor to be multiplied against the estimate returned by the tx simulation; if the gas limit is set manually this flag is ignored  (default 1)
      --gas-prices string        Gas prices in decimal format to determine the transaction fee (e.g. 0.1uatom)
      --generate-only            Build an unsigned transaction and write it to STDOUT (when enabled, the local Keybase only accessed when providing a key name)
  -h, --help                     help for send
      --keyring-backend string   Select keyring's backend (os|file|kwallet|pass|test|memory) (default "os")
      --keyring-dir string       The client Keyring directory; if omitted, the default 'home' directory will be used
      --ledger                   Use a connected Ledger device
      --node string              <host>:<port> to tendermint rpc interface for this chain (default "tcp://localhost:26657")
      --note string              Note to add a description to the transaction (previously --memo)
      --offline                  Offline mode (does not allow any online functionality)
  -o, --output string            Output format (text|json) (default "json")
  -s, --sequence uint            The sequence number of the signing account (offline mode only)
      --sign-mode string         Choose sign mode (direct|amino-json|direct-aux), this is an advanced feature
      --timeout-height uint      Set a block timeout height to prevent the tx from being committed past a certain height
      --tip string               Tip is the amount that is going to be transferred to the fee payer on the target chain. This flag is only valid when used with --aux, and is ignored if the target chain didn't enable the TipDecorator
  -y, --yes                      Skip tx broadcasting prompt confirmation

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

root@dc4df2e3dafa:~# empowerd q
Querying subcommands

Usage:
  empowerd query [flags]
  empowerd query [command]

Aliases:
  query, q

Available Commands:
  account                  Query for account by address
  auth                     Querying commands for the auth module
  authz                    Querying commands for the authz module
  bank                     Querying commands for the bank module
  block                    Get verified data for the block at given height
  certificates             Querying commands for the certificates module
  distribution             Querying commands for the distribution module
  evidence                 Query for evidence by hash or for all (paginated) submitted evidence
  feegrant                 Querying commands for the feegrant module
  gov                      Querying commands for the governance module
  group                    Querying commands for the group module
  ibc                      Querying commands for the IBC module
  ibc-fee                  IBC relayer incentivization query subcommands
  ibc-transfer             IBC fungible token transfer query subcommands
  interchain-accounts      IBC interchain accounts query subcommands
  mint                     Querying commands for the minting module
  params                   Querying commands for the params module
  plasticcredit            Querying commands for the plasticcredit module
  proofofexistence         Querying commands for the proofofexistence module
  slashing                 Querying commands for the slashing module
  staking                  Querying commands for the staking module
  tendermint-validator-set Get the full tendermint validator set at given height
  tx                       Query for a transaction by hash, "<addr>/<seq>" combination or comma-separated signatures in a committed block
  txs                      Query for paginated transactions that match a set of events
  upgrade                  Querying commands for the upgrade module
  wasm                     Querying commands for the wasm module

Flags:
  -h, --help   help for query

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

Use "empowerd query [command] --help" for more information about a command.
root@dc4df2e3dafa:~# empowerd q account
Error: accepts 1 arg(s), received 0
Usage:
  empowerd query account [address] [flags]

Flags:
      --grpc-addr string   the gRPC endpoint to use for this chain
      --grpc-insecure      allow gRPC over insecure channels, if not TLS the server must use TLS
      --height int         Use a specific height to query state at (this can error if the node is pruning state)
  -h, --help               help for account
      --node string        <host>:<port> to Tendermint RPC interface for this chain (default "tcp://localhost:26657")
  -o, --output string      Output format (text|json) (default "text")

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

root@dc4df2e3dafa:~# empowerd q account empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw
Error: your node may be syncing, please check node status using `/status`: rpc error: code = NotFound desc = rpc error: code = NotFound desc = account empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw not found: key not found
Usage:
  empowerd query account [address] [flags]

Flags:
      --grpc-addr string   the gRPC endpoint to use for this chain
      --grpc-insecure      allow gRPC over insecure channels, if not TLS the server must use TLS
      --height int         Use a specific height to query state at (this can error if the node is pruning state)
  -h, --help               help for account
      --node string        <host>:<port> to Tendermint RPC interface for this chain (default "tcp://localhost:26657")
  -o, --output string      Output format (text|json) (default "text")

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

root@dc4df2e3dafa:~# empowerd q account empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
'@type': /cosmos.auth.v1beta1.BaseAccount
account_number: "19"
address: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
pub_key:
  '@type': /cosmos.crypto.secp256k1.PubKey
  key: A9XKI69h2nvYM89MfPdKr3nWv1NHsDSqXla7aW0mhvUX
sequence: "27"
root@dc4df2e3dafa:~# empowerd q bank empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
Error: unknown command "empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw" for "bank"
Usage:
  empowerd query bank [flags]
  empowerd query bank [command]

Available Commands:
  balances           Query for account balances by address
  denom-metadata     Query the client metadata for coin denominations
  send-enabled       Query for send enabled entries
  spendable-balances Query for account spendable balances by address
  total              Query the total supply of coins of the chain

Flags:
  -h, --help   help for bank

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

Use "empowerd query bank [command] --help" for more information about a command.

root@dc4df2e3dafa:~# empowerd q bank balances empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
balances:
- amount: "999999859829"
  denom: umpwr
pagination:
  next_key: null
  total: "0"
root@dc4df2e3dafa:~# empowerd keys list
Enter keyring passphrase (attempt 1/3):
- address: empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw
  name: test
  pubkey: '{"@type":"/cosmos.crypto.secp256k1.PubKey","key":"Aj1mH8rGkKaKtix9jFgjRqhqSrOieyul2NzGbZkASZKR"}'
  type: local
- address: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  name: validator
  pubkey: '{"@type":"/cosmos.crypto.secp256k1.PubKey","key":"A9XKI69h2nvYM89MfPdKr3nWv1NHsDSqXla7aW0mhvUX"}'
  type: local

root@dc4df2e3dafa:~# empowerd q bank balances empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw
balances: []
pagination:
  next_key: null
  total: "0"
root@dc4df2e3dafa:~# empowerd tx bank send empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw 1000 --chain-id emp-devnet-1
Enter keyring passphrase (attempt 1/3):
Error: invalid decimal coin expression: 1000
Usage:
  empowerd tx bank send [from_key_or_address] [to_address] [amount] [flags]

Flags:
  -a, --account-number uint      The account number of the signing account (offline mode only)
      --aux                      Generate aux signer data instead of sending a tx
  -b, --broadcast-mode string    Transaction broadcasting mode (sync|async) (default "sync")
      --chain-id string          The network chain ID
      --dry-run                  ignore the --gas flag and perform a simulation of a transaction, but don't broadcast it (when enabled, the local Keybase is not accessible)
      --fee-granter string       Fee granter grants fees for the transaction
      --fee-payer string         Fee payer pays fees for the transaction instead of deducting from the signer
      --fees string              Fees to pay along with transaction; eg: 10uatom
      --from string              Name or address of private key with which to sign
      --gas string               gas limit to set per-transaction; set to "auto" to calculate sufficient gas automatically. Note: "auto" option doesn't always report accurate results. Set a valid coin value to adjust the result. Can be used instead of "fees". (default 200000)
      --gas-adjustment float     adjustment factor to be multiplied against the estimate returned by the tx simulation; if the gas limit is set manually this flag is ignored  (default 1)
      --gas-prices string        Gas prices in decimal format to determine the transaction fee (e.g. 0.1uatom)
      --generate-only            Build an unsigned transaction and write it to STDOUT (when enabled, the local Keybase only accessed when providing a key name)
  -h, --help                     help for send
      --keyring-backend string   Select keyring's backend (os|file|kwallet|pass|test|memory) (default "os")
      --keyring-dir string       The client Keyring directory; if omitted, the default 'home' directory will be used
      --ledger                   Use a connected Ledger device
      --node string              <host>:<port> to tendermint rpc interface for this chain (default "tcp://localhost:26657")
      --note string              Note to add a description to the transaction (previously --memo)
      --offline                  Offline mode (does not allow any online functionality)
  -o, --output string            Output format (text|json) (default "json")
  -s, --sequence uint            The sequence number of the signing account (offline mode only)
      --sign-mode string         Choose sign mode (direct|amino-json|direct-aux), this is an advanced feature
      --timeout-height uint      Set a block timeout height to prevent the tx from being committed past a certain height
      --tip string               Tip is the amount that is going to be transferred to the fee payer on the target chain. This flag is only valid when used with --aux, and is ignored if the target chain didn't enable the TipDecorator
  -y, --yes                      Skip tx broadcasting prompt confirmation

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

root@dc4df2e3dafa:~# empowerd tx bank send empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw 1 --chain-id emp-devnet-1
Enter keyring passphrase (attempt 1/3):
Error: invalid decimal coin expression: 1
Usage:
  empowerd tx bank send [from_key_or_address] [to_address] [amount] [flags]

Flags:
  -a, --account-number uint      The account number of the signing account (offline mode only)
      --aux                      Generate aux signer data instead of sending a tx
  -b, --broadcast-mode string    Transaction broadcasting mode (sync|async) (default "sync")
      --chain-id string          The network chain ID
      --dry-run                  ignore the --gas flag and perform a simulation of a transaction, but don't broadcast it (when enabled, the local Keybase is not accessible)
      --fee-granter string       Fee granter grants fees for the transaction
      --fee-payer string         Fee payer pays fees for the transaction instead of deducting from the signer
      --fees string              Fees to pay along with transaction; eg: 10uatom
      --from string              Name or address of private key with which to sign
      --gas string               gas limit to set per-transaction; set to "auto" to calculate sufficient gas automatically. Note: "auto" option doesn't always report accurate results. Set a valid coin value to adjust the result. Can be used instead of "fees". (default 200000)
      --gas-adjustment float     adjustment factor to be multiplied against the estimate returned by the tx simulation; if the gas limit is set manually this flag is ignored  (default 1)
      --gas-prices string        Gas prices in decimal format to determine the transaction fee (e.g. 0.1uatom)
      --generate-only            Build an unsigned transaction and write it to STDOUT (when enabled, the local Keybase only accessed when providing a key name)
  -h, --help                     help for send
      --keyring-backend string   Select keyring's backend (os|file|kwallet|pass|test|memory) (default "os")
      --keyring-dir string       The client Keyring directory; if omitted, the default 'home' directory will be used
      --ledger                   Use a connected Ledger device
      --node string              <host>:<port> to tendermint rpc interface for this chain (default "tcp://localhost:26657")
      --note string              Note to add a description to the transaction (previously --memo)
      --offline                  Offline mode (does not allow any online functionality)
  -o, --output string            Output format (text|json) (default "json")
  -s, --sequence uint            The sequence number of the signing account (offline mode only)
      --sign-mode string         Choose sign mode (direct|amino-json|direct-aux), this is an advanced feature
      --timeout-height uint      Set a block timeout height to prevent the tx from being committed past a certain height
      --tip string               Tip is the amount that is going to be transferred to the fee payer on the target chain. This flag is only valid when used with --aux, and is ignored if the target chain didn't enable the TipDecorator
  -y, --yes                      Skip tx broadcasting prompt confirmation

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

root@dc4df2e3dafa:~# empowerd tx bank send empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw 1000umpwr --chain-id emp-devnet-1
Enter keyring passphrase (attempt 1/3):
auth_info:
  fee:
    amount: []
    gas_limit: "200000"
    granter: ""
    payer: ""
  signer_infos: []
  tip: null
body:
  extension_options: []
  memo: ""
  messages:
  - '@type': /cosmos.bank.v1beta1.MsgSend
    amount:
    - amount: "1000"
      denom: umpwr
    from_address: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
    to_address: empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw
  non_critical_extension_options: []
  timeout_height: "0"
signatures: []
confirm transaction before signing and broadcasting [y/N]: y
code: 0
codespace: ""
data: ""
events: []
gas_used: "0"
gas_wanted: "0"
height: "0"
info: ""
logs: []
raw_log: '[]'
timestamp: ""
tx: null
txhash: 23AE0E51742B87060C3DAAFFA3FF53FDB1B2C95DE98FDBA1D46C95AFD8867C5D
root@dc4df2e3dafa:~# empowerd q bank balances empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw
balances:
- amount: "1000"
  denom: umpwr
pagination:
  next_key: null
  total: "0"
root@dc4df2e3dafa:~# empowerd tx bank send empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw 5000000umpwr --chain-id emp-devnet-1
Enter keyring passphrase (attempt 1/3):
auth_info:
  fee:
    amount: []
    gas_limit: "200000"
    granter: ""
    payer: ""
  signer_infos: []
  tip: null
body:
  extension_options: []
  memo: ""
  messages:
  - '@type': /cosmos.bank.v1beta1.MsgSend
    amount:
    - amount: "5000000"
      denom: umpwr
    from_address: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
    to_address: empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw
  non_critical_extension_options: []
  timeout_height: "0"
signatures: []
confirm transaction before signing and broadcasting [y/N]: y
code: 0
codespace: ""
data: ""
events: []
gas_used: "0"
gas_wanted: "0"
height: "0"
info: ""
logs: []
raw_log: '[]'
timestamp: ""
tx: null
txhash: 42E3117BB92B31C76D8E77BAA90932FB44C503777C7EB26884E80316181B6EF1
root@dc4df2e3dafa:~# empowerd q bank balances empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw
balances:
- amount: "5001000"
  denom: umpwr
pagination:
  next_key: null
  total: "0"
root@dc4df2e3dafa:~# empwerd keys list
bash: empwerd: command not found
root@dc4df2e3dafa:~# empowerd keys list
Enter keyring passphrase (attempt 1/3):
- address: empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw
  name: test
  pubkey: '{"@type":"/cosmos.crypto.secp256k1.PubKey","key":"Aj1mH8rGkKaKtix9jFgjRqhqSrOieyul2NzGbZkASZKR"}'
  type: local
- address: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  name: validator
  pubkey: '{"@type":"/cosmos.crypto.secp256k1.PubKey","key":"A9XKI69h2nvYM89MfPdKr3nWv1NHsDSqXla7aW0mhvUX"}'
  type: local

root@dc4df2e3dafa:~# empowerd tx authz grant empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw send --spend-limit=100stake --from empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw
Enter keyring passphrase (attempt 1/3):
Error: chain ID required but not specified
Usage:
  empowerd tx authz grant <grantee> <authorization_type="send"|"generic"|"delegate"|"unbond"|"redelegate"> --from <granter> [flags]

Flags:
  -a, --account-number uint          The account number of the signing account (offline mode only)
      --allow-list strings           Allowed addresses grantee is allowed to send funds separated by ,
      --allowed-validators strings   Allowed validators addresses separated by ,
      --aux                          Generate aux signer data instead of sending a tx
  -b, --broadcast-mode string        Transaction broadcasting mode (sync|async) (default "sync")
      --chain-id string              The network chain ID
      --deny-validators strings      Deny validators addresses separated by ,
      --dry-run                      ignore the --gas flag and perform a simulation of a transaction, but don't broadcast it (when enabled, the local Keybase is not accessible)
      --expiration int               Expire time as Unix timestamp. Set zero (0) for no expiry. Default is 0.
      --fee-granter string           Fee granter grants fees for the transaction
      --fee-payer string             Fee payer pays fees for the transaction instead of deducting from the signer
      --fees string                  Fees to pay along with transaction; eg: 10uatom
      --from string                  Name or address of private key with which to sign
      --gas string                   gas limit to set per-transaction; set to "auto" to calculate sufficient gas automatically. Note: "auto" option doesn't always report accurate results. Set a valid coin value to adjust the result. Can be used instead of "fees". (default 200000)
      --gas-adjustment float         adjustment factor to be multiplied against the estimate returned by the tx simulation; if the gas limit is set manually this flag is ignored  (default 1)
      --gas-prices string            Gas prices in decimal format to determine the transaction fee (e.g. 0.1uatom)
      --generate-only                Build an unsigned transaction and write it to STDOUT (when enabled, the local Keybase only accessed when providing a key name)
  -h, --help                         help for grant
      --keyring-backend string       Select keyring's backend (os|file|kwallet|pass|test|memory) (default "os")
      --keyring-dir string           The client Keyring directory; if omitted, the default 'home' directory will be used
      --ledger                       Use a connected Ledger device
      --msg-type string              The Msg method name for which we are creating a GenericAuthorization
      --node string                  <host>:<port> to tendermint rpc interface for this chain (default "tcp://localhost:26657")
      --note string                  Note to add a description to the transaction (previously --memo)
      --offline                      Offline mode (does not allow any online functionality)
  -o, --output string                Output format (text|json) (default "json")
  -s, --sequence uint                The sequence number of the signing account (offline mode only)
      --sign-mode string             Choose sign mode (direct|amino-json|direct-aux), this is an advanced feature
      --spend-limit string           SpendLimit for Send Authorization, an array of Coins allowed spend
      --timeout-height uint          Set a block timeout height to prevent the tx from being committed past a certain height
      --tip string                   Tip is the amount that is going to be transferred to the fee payer on the target chain. This flag is only valid when used with --aux, and is ignored if the target chain didn't enable the TipDecorator
  -y, --yes                          Skip tx broadcasting prompt confirmation

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

root@dc4df2e3dafa:~# empowerd tx authz grant empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw send --spend-limit=100stake --from empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw --chain-id -emp-devnet-1
Enter keyring passphrase (attempt 1/3):
auth_info:
  fee:
    amount: []
    gas_limit: "200000"
    granter: ""
    payer: ""
  signer_infos: []
  tip: null
body:
  extension_options: []
  memo: ""
  messages:
  - '@type': /cosmos.authz.v1beta1.MsgGrant
    grant:
      authorization:
        '@type': /cosmos.bank.v1beta1.SendAuthorization
        allow_list: []
        spend_limit:
        - amount: "100"
          denom: stake
      expiration: null
    grantee: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
    granter: empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw
  non_critical_extension_options: []
  timeout_height: "0"
signatures: []
confirm transaction before signing and broadcasting [y/N]: y
code: 4
codespace: sdk
data: ""
events: []
gas_used: "0"
gas_wanted: "0"
height: "0"
info: ""
logs: []
raw_log: 'signature verification failed; please verify account number (27) and chain-id
  (emp-devnet-1): unauthorized'
timestamp: ""
tx: null
txhash: 5AB80994B8ABBA50C6DBBD74FD3B4A7209F288C5941EBCE223A30FDCA1A494A8
root@dc4df2e3dafa:~# empowerd q authz grants-by-granter empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
grants:
- authorization:
    '@type': /empowerchain.plasticcredit.TransferAuthorization
    denom: PCRD/00710LPVHVM3WGX000000115
    max_credits: "1"
  expiration: null
  grantee: empower1hywmhhy3jl7j7lpcghfjpsynmy9vrr0ne2009s
  granter: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
pagination:
  next_key: null
  total: "0"
root@dc4df2e3dafa:~# empowerd q authz grants-by-granter empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw
grants: []
pagination:
  next_key: null
  total: "0"
root@dc4df2e3dafa:~# empowerd q tx 5AB80994B8ABBA50C6DBBD74FD3B4A7209F288C5941EBCE223A30FDCA1A494A8
Error: error in json rpc client, with http response metadata: (Status: 200 OK, Protocol HTTP/1.1). RPC error -32603 - Internal error: tx (5AB80994B8ABBA50C6DBBD74FD3B4A7209F288C5941EBCE223A30FDCA1A494A8) not found
Usage:
  empowerd query tx --type=[hash|acc_seq|signature] [hash|acc_seq|signature] [flags]

Flags:
      --grpc-addr string   the gRPC endpoint to use for this chain
      --grpc-insecure      allow gRPC over insecure channels, if not TLS the server must use TLS
      --height int         Use a specific height to query state at (this can error if the node is pruning state)
  -h, --help               help for tx
      --node string        <host>:<port> to Tendermint RPC interface for this chain (default "tcp://localhost:26657")
  -o, --output string      Output format (text|json) (default "text")
      --type string        The type to be used when querying tx, can be one of "hash", "acc_seq", "signature" (default "hash")

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

root@dc4df2e3dafa:~# empowerd q tx B99FE0A33F54009CF205973D377208BF5EF3388528BAD145FCDC2BA91610D96D
code: 4
codespace: sdk
data: ""
events:
- attributes:
  - index: true
    key: fee
    value: ""
  - index: true
    key: fee_payer
    value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  type: tx
- attributes:
  - index: true
    key: acc_seq
    value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw/26
  type: tx
- attributes:
  - index: true
    key: signature
    value: CWXTYBmBxCSqIPG5KdL2MPEdm9HMQluxVKvd3VExBDZhWVQ5PXfuhyGl9yK5dNvnZKDstXeYWjByw6XZVmpy3g==
  type: tx
gas_used: "31976"
gas_wanted: "200000"
height: "3339"
info: ""
logs: []
raw_log: 'failed to execute message; message index: 0: approver empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  does not have authorization on issuer with id 2: unauthorized'
timestamp: "2024-01-06T06:00:26Z"
tx:
  '@type': /cosmos.tx.v1beta1.Tx
  auth_info:
    fee:
      amount: []
      gas_limit: "200000"
      granter: ""
      payer: ""
    signer_infos:
    - mode_info:
        single:
          mode: SIGN_MODE_DIRECT
      public_key:
        '@type': /cosmos.crypto.secp256k1.PubKey
        key: A9XKI69h2nvYM89MfPdKr3nWv1NHsDSqXla7aW0mhvUX
      sequence: "26"
    tip: null
  body:
    extension_options: []
    memo: ""
    messages:
    - '@type': /empowerchain.plasticcredit.MsgApproveProject
      approver: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
      project_id: "12"
    non_critical_extension_options: []
    timeout_height: "0"
  signatures:
  - CWXTYBmBxCSqIPG5KdL2MPEdm9HMQluxVKvd3VExBDZhWVQ5PXfuhyGl9yK5dNvnZKDstXeYWjByw6XZVmpy3g==
txhash: B99FE0A33F54009CF205973D377208BF5EF3388528BAD145FCDC2BA91610D96D
root@dc4df2e3dafa:~# empowerd tx authz grant empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw send --spend-limit=100stake --from empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
Enter keyring passphrase (attempt 1/3):
Error: chain ID required but not specified
Usage:
  empowerd tx authz grant <grantee> <authorization_type="send"|"generic"|"delegate"|"unbond"|"redelegate"> --from <granter> [flags]

Flags:
  -a, --account-number uint          The account number of the signing account (offline mode only)
      --allow-list strings           Allowed addresses grantee is allowed to send funds separated by ,
      --allowed-validators strings   Allowed validators addresses separated by ,
      --aux                          Generate aux signer data instead of sending a tx
  -b, --broadcast-mode string        Transaction broadcasting mode (sync|async) (default "sync")
      --chain-id string              The network chain ID
      --deny-validators strings      Deny validators addresses separated by ,
      --dry-run                      ignore the --gas flag and perform a simulation of a transaction, but don't broadcast it (when enabled, the local Keybase is not accessible)
      --expiration int               Expire time as Unix timestamp. Set zero (0) for no expiry. Default is 0.
      --fee-granter string           Fee granter grants fees for the transaction
      --fee-payer string             Fee payer pays fees for the transaction instead of deducting from the signer
      --fees string                  Fees to pay along with transaction; eg: 10uatom
      --from string                  Name or address of private key with which to sign
      --gas string                   gas limit to set per-transaction; set to "auto" to calculate sufficient gas automatically. Note: "auto" option doesn't always report accurate results. Set a valid coin value to adjust the result. Can be used instead of "fees". (default 200000)
      --gas-adjustment float         adjustment factor to be multiplied against the estimate returned by the tx simulation; if the gas limit is set manually this flag is ignored  (default 1)
      --gas-prices string            Gas prices in decimal format to determine the transaction fee (e.g. 0.1uatom)
      --generate-only                Build an unsigned transaction and write it to STDOUT (when enabled, the local Keybase only accessed when providing a key name)
  -h, --help                         help for grant
      --keyring-backend string       Select keyring's backend (os|file|kwallet|pass|test|memory) (default "os")
      --keyring-dir string           The client Keyring directory; if omitted, the default 'home' directory will be used
      --ledger                       Use a connected Ledger device
      --msg-type string              The Msg method name for which we are creating a GenericAuthorization
      --node string                  <host>:<port> to tendermint rpc interface for this chain (default "tcp://localhost:26657")
      --note string                  Note to add a description to the transaction (previously --memo)
      --offline                      Offline mode (does not allow any online functionality)
  -o, --output string                Output format (text|json) (default "json")
  -s, --sequence uint                The sequence number of the signing account (offline mode only)
      --sign-mode string             Choose sign mode (direct|amino-json|direct-aux), this is an advanced feature
      --spend-limit string           SpendLimit for Send Authorization, an array of Coins allowed spend
      --timeout-height uint          Set a block timeout height to prevent the tx from being committed past a certain height
      --tip string                   Tip is the amount that is going to be transferred to the fee payer on the target chain. This flag is only valid when used with --aux, and is ignored if the target chain didn't enable the TipDecorator
  -y, --yes                          Skip tx broadcasting prompt confirmation

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

root@dc4df2e3dafa:~# empowerd tx authz grant empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw send --spend-limit=100stake --from empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw --chain-id emp-devnet-1
Enter keyring passphrase (attempt 1/3):
password must be at least 8 characters
Enter keyring passphrase (attempt 2/3):
auth_info:
  fee:
    amount: []
    gas_limit: "200000"
    granter: ""
    payer: ""
  signer_infos: []
  tip: null
body:
  extension_options: []
  memo: ""
  messages:
  - '@type': /cosmos.authz.v1beta1.MsgGrant
    grant:
      authorization:
        '@type': /cosmos.bank.v1beta1.SendAuthorization
        allow_list: []
        spend_limit:
        - amount: "100"
          denom: stake
      expiration: null
    grantee: empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw
    granter: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  non_critical_extension_options: []
  timeout_height: "0"
signatures: []
confirm transaction before signing and broadcasting [y/N]: y
code: 0
codespace: ""
data: ""
events: []
gas_used: "0"
gas_wanted: "0"
height: "0"
info: ""
logs: []
raw_log: '[]'
timestamp: ""
tx: null
txhash: 98E3F9DA661EE87C1EBEF59EC07E7C3C20B2A8CB9EE2CCE4FE4BB07193386A1E
root@dc4df2e3dafa:~# empowerd q authz grants-by-granter empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw
grants: []
pagination:
  next_key: null
  total: "0"
root@dc4df2e3dafa:~# empowerd q tx 98E3F9DA661EE87C1EBEF59EC07E7C3C20B2A8CB9EE2CCE4FE4BB07193386A1E
code: 0
codespace: ""
data: 12280A262F636F736D6F732E617574687A2E763162657461312E4D73674772616E74526573706F6E7365
events:
- attributes:
  - index: true
    key: fee
    value: ""
  - index: true
    key: fee_payer
    value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  type: tx
- attributes:
  - index: true
    key: acc_seq
    value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw/29
  type: tx
- attributes:
  - index: true
    key: signature
    value: zlyfzadSujt+T2hjjS9iXEG+jFDzf29ivV2LAqBRMr9hulVS1IneaW36mxAo0isGoeAk70KlUdol3zCTQ7lr/A==
  type: tx
- attributes:
  - index: true
    key: action
    value: /cosmos.authz.v1beta1.MsgGrant
  - index: true
    key: sender
    value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
  - index: true
    key: module
    value: authz
  type: message
- attributes:
  - index: true
    key: grantee
    value: '"empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw"'
  - index: true
    key: granter
    value: '"empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw"'
  - index: true
    key: msg_type_url
    value: '"/cosmos.bank.v1beta1.MsgSend"'
  type: cosmos.authz.v1beta1.EventGrant
gas_used: "37864"
gas_wanted: "200000"
height: "8067"
info: ""
logs:
- events:
  - attributes:
    - key: action
      value: /cosmos.authz.v1beta1.MsgGrant
    - key: sender
      value: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
    - key: module
      value: authz
    type: message
  - attributes:
    - key: grantee
      value: '"empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw"'
    - key: granter
      value: '"empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw"'
    - key: msg_type_url
      value: '"/cosmos.bank.v1beta1.MsgSend"'
    type: cosmos.authz.v1beta1.EventGrant
  log: ""
  msg_index: 0
raw_log: '[{"msg_index":0,"events":[{"type":"message","attributes":[{"key":"action","value":"/cosmos.authz.v1beta1.MsgGrant"},{"key":"sender","value":"empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw"},{"key":"module","value":"authz"}]},{"type":"cosmos.authz.v1beta1.EventGrant","attributes":[{"key":"grantee","value":"\"empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw\""},{"key":"granter","value":"\"empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw\""},{"key":"msg_type_url","value":"\"/cosmos.bank.v1beta1.MsgSend\""}]}]}]'
timestamp: "2024-01-06T12:39:22Z"
tx:
  '@type': /cosmos.tx.v1beta1.Tx
  auth_info:
    fee:
      amount: []
      gas_limit: "200000"
      granter: ""
      payer: ""
    signer_infos:
    - mode_info:
        single:
          mode: SIGN_MODE_DIRECT
      public_key:
        '@type': /cosmos.crypto.secp256k1.PubKey
        key: A9XKI69h2nvYM89MfPdKr3nWv1NHsDSqXla7aW0mhvUX
      sequence: "29"
    tip: null
  body:
    extension_options: []
    memo: ""
    messages:
    - '@type': /cosmos.authz.v1beta1.MsgGrant
      grant:
        authorization:
          '@type': /cosmos.bank.v1beta1.SendAuthorization
          allow_list: []
          spend_limit:
          - amount: "100"
            denom: stake
        expiration: null
      grantee: empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw
      granter: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
    non_critical_extension_options: []
    timeout_height: "0"
  signatures:
  - zlyfzadSujt+T2hjjS9iXEG+jFDzf29ivV2LAqBRMr9hulVS1IneaW36mxAo0isGoeAk70KlUdol3zCTQ7lr/A==
txhash: 98E3F9DA661EE87C1EBEF59EC07E7C3C20B2A8CB9EE2CCE4FE4BB07193386A1E
root@dc4df2e3dafa:~# empowerd q authz grants-by-granter empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
grants:
- authorization:
    '@type': /cosmos.bank.v1beta1.SendAuthorization
    allow_list: []
    spend_limit:
    - amount: "100"
      denom: stake
  expiration: null
  grantee: empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw
  granter: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
- authorization:
    '@type': /empowerchain.plasticcredit.TransferAuthorization
    denom: PCRD/00710LPVHVM3WGX000000115
    max_credits: "1"
  expiration: null
  grantee: empower1hywmhhy3jl7j7lpcghfjpsynmy9vrr0ne2009s
  granter: empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw
pagination:
  next_key: null
  total: "0"
root@dc4df2e3dafa:~# empowerd tx authz grant empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw send --spend-limroot@dc4df2e3dafa:~# empowerd q authz grants-by-granter empower1qp5claka0lzke6nc7etyaje4654gwx42zktzlw^C
root@dc4df2e3dafa:~# empowerd tx wasm store ./home/vaquish/Desktop/Dapp/empowerchain-dapp/cosmwasm/target/wasm32-unknown-unknown/release/cw721_base.wasm --from=empower13cwsdsetcrhcyd3jeed0mgteg35qaju0q5s0u0drfylagahygwwst8z2la --generate-only --chain-id circulus-1 > storemsg.json
Error: open ./home/vaquish/Desktop/Dapp/empowerchain-dapp/cosmwasm/target/wasm32-unknown-unknown/release/cw721_base.wasm: no such file or directory
root@dc4df2e3dafa:~# ls -a
.  ..  .bashrc	.empowerchain  .profile  cw721_base.wasm  storemsg.json
root@dc4df2e3dafa:~# empowerd tx wasm store ./root/cw721_base.wasm --from=empower13cwsdsetcrhcyd3jeed0mgteg35qaju0q5s0u0drfylagahygwwst8z2la --generate-only --chain-id circulus-1 > storemsg.json
Error: open ./root/cw721_base.wasm: no such file or directory
root@dc4df2e3dafa:~# empowerd tx wasm store /root/cw721_base.wasm --from=empower13cwsdsetcrhcyd3jeed0mgteg35qaju0q5s0u0drfylagahygwwst8z2la --generate-only --chain-id circulus-1 > storemsg.json
root@dc4df2e3dafa:~# ls -a
.  ..  .bashrc	.empowerchain  .profile  cw721_base.wasm  storemsg.json
root@dc4df2e3dafa:~# cat storemsg.json
root@dc4df2e3dafa:~# empowerd tx group
Group transaction subcommands

Usage:
  empowerd tx group [flags]
  empowerd tx group [command]

Available Commands:
  create-group                        Create a group which is an aggregation of member accounts with associated weights and an administrator account.
  create-group-policy                 Create a group policy which is an account associated with a group and a decision policy. Note, the '--from' flag is ignored as it is implied from [admin].
  create-group-with-policy            Create a group with policy which is an aggregation of member accounts with associated weights, an administrator account and decision policy.
  draft-proposal                      Generate a draft proposal json file. The generated proposal json contains only one message (skeleton).
  exec                                Execute a proposal
  leave-group                         Remove member from the group
  submit-proposal                     Submit a new proposal
  update-group-admin                  Update a group's admin
  update-group-members                Update a group's members. Set a member's weight to "0" to delete it.
  update-group-metadata               Update a group's metadata
  update-group-policy-admin           Update a group policy admin
  update-group-policy-decision-policy Update a group policy's decision policy
  update-group-policy-metadata        Update a group policy metadata
  vote                                Vote on a proposal
  withdraw-proposal                   Withdraw a submitted proposal

Flags:
  -h, --help   help for group

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

Use "empowerd tx group [command] --help" for more information about a command.
root@dc4df2e3dafa:~# empowerd tx group submit-proposal
Error: accepts 1 arg(s), received 0
Usage:
  empowerd tx group submit-proposal [proposal_json_file] [flags]

Examples:

"empowerd" tx group submit-proposal path/to/proposal.json
	
	Where proposal.json contains:

{
	"group_policy_address": "cosmos1...",
	// array of proto-JSON-encoded sdk.Msgs
	"messages": [
	{
		"@type": "/cosmos.bank.v1beta1.MsgSend",
		"from_address": "cosmos1...",
		"to_address": "cosmos1...",
		"amount":[{"denom": "stake","amount": "10"}]
	}
	],
	// metadata can be any of base64 encoded, raw text, stringified json, IPFS link to json
	// see below for example metadata
	"metadata": "4pIMOgIGx1vZGU=", // base64-encoded metadata
	"title": "My proposal",
	"summary": "This is a proposal to send 10 stake to cosmos1...",
	"proposers": ["cosmos1...", "cosmos1..."],
}

metadata example: 
{
	"title": "",
	"authors": [""],
	"summary": "",
	"details": "", 
	"proposal_forum_url": "",
	"vote_option_context": "",
} 


Flags:
  -a, --account-number uint      The account number of the signing account (offline mode only)
      --aux                      Generate aux signer data instead of sending a tx
  -b, --broadcast-mode string    Transaction broadcasting mode (sync|async) (default "sync")
      --chain-id string          The network chain ID
      --dry-run                  ignore the --gas flag and perform a simulation of a transaction, but don't broadcast it (when enabled, the local Keybase is not accessible)
      --exec string              Set to 1 to try to execute proposal immediately after creation (proposers signatures are considered as Yes votes)
      --fee-granter string       Fee granter grants fees for the transaction
      --fee-payer string         Fee payer pays fees for the transaction instead of deducting from the signer
      --fees string              Fees to pay along with transaction; eg: 10uatom
      --from string              Name or address of private key with which to sign
      --gas string               gas limit to set per-transaction; set to "auto" to calculate sufficient gas automatically. Note: "auto" option doesn't always report accurate results. Set a valid coin value to adjust the result. Can be used instead of "fees". (default 200000)
      --gas-adjustment float     adjustment factor to be multiplied against the estimate returned by the tx simulation; if the gas limit is set manually this flag is ignored  (default 1)
      --gas-prices string        Gas prices in decimal format to determine the transaction fee (e.g. 0.1uatom)
      --generate-only            Build an unsigned transaction and write it to STDOUT (when enabled, the local Keybase only accessed when providing a key name)
  -h, --help                     help for submit-proposal
      --keyring-backend string   Select keyring's backend (os|file|kwallet|pass|test|memory) (default "os")
      --keyring-dir string       The client Keyring directory; if omitted, the default 'home' directory will be used
      --ledger                   Use a connected Ledger device
      --node string              <host>:<port> to tendermint rpc interface for this chain (default "tcp://localhost:26657")
      --note string              Note to add a description to the transaction (previously --memo)
      --offline                  Offline mode (does not allow any online functionality)
  -o, --output string            Output format (text|json) (default "json")
  -s, --sequence uint            The sequence number of the signing account (offline mode only)
      --sign-mode string         Choose sign mode (direct|amino-json|direct-aux), this is an advanced feature
      --timeout-height uint      Set a block timeout height to prevent the tx from being committed past a certain height
      --tip string               Tip is the amount that is going to be transferred to the fee payer on the target chain. This flag is only valid when used with --aux, and is ignored if the target chain didn't enable the TipDecorator
  -y, --yes                      Skip tx broadcasting prompt confirmation

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

root@dc4df2e3dafa:~# empowerd tx group vote           
Error: accepts 4 arg(s), received 0
Usage:
  empowerd tx group vote [proposal-id] [voter] [vote-option] [metadata] [flags]

Flags:
  -a, --account-number uint      The account number of the signing account (offline mode only)
      --aux                      Generate aux signer data instead of sending a tx
  -b, --broadcast-mode string    Transaction broadcasting mode (sync|async) (default "sync")
      --chain-id string          The network chain ID
      --dry-run                  ignore the --gas flag and perform a simulation of a transaction, but don't broadcast it (when enabled, the local Keybase is not accessible)
      --exec string              Set to 1 to try to execute proposal immediately after voting
      --fee-granter string       Fee granter grants fees for the transaction
      --fee-payer string         Fee payer pays fees for the transaction instead of deducting from the signer
      --fees string              Fees to pay along with transaction; eg: 10uatom
      --from string              Name or address of private key with which to sign
      --gas string               gas limit to set per-transaction; set to "auto" to calculate sufficient gas automatically. Note: "auto" option doesn't always report accurate results. Set a valid coin value to adjust the result. Can be used instead of "fees". (default 200000)
      --gas-adjustment float     adjustment factor to be multiplied against the estimate returned by the tx simulation; if the gas limit is set manually this flag is ignored  (default 1)
      --gas-prices string        Gas prices in decimal format to determine the transaction fee (e.g. 0.1uatom)
      --generate-only            Build an unsigned transaction and write it to STDOUT (when enabled, the local Keybase only accessed when providing a key name)
  -h, --help                     help for vote
      --keyring-backend string   Select keyring's backend (os|file|kwallet|pass|test|memory) (default "os")
      --keyring-dir string       The client Keyring directory; if omitted, the default 'home' directory will be used
      --ledger                   Use a connected Ledger device
      --node string              <host>:<port> to tendermint rpc interface for this chain (default "tcp://localhost:26657")
      --note string              Note to add a description to the transaction (previously --memo)
      --offline                  Offline mode (does not allow any online functionality)
  -o, --output string            Output format (text|json) (default "json")
  -s, --sequence uint            The sequence number of the signing account (offline mode only)
      --sign-mode string         Choose sign mode (direct|amino-json|direct-aux), this is an advanced feature
      --timeout-height uint      Set a block timeout height to prevent the tx from being committed past a certain height
      --tip string               Tip is the amount that is going to be transferred to the fee payer on the target chain. This flag is only valid when used with --aux, and is ignored if the target chain didn't enable the TipDecorator
  -y, --yes                      Skip tx broadcasting prompt confirmation

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

root@dc4df2e3dafa:~# empowerd tx group submit-proposal storeprop.json --from public-hotwallet --gas auto --gas-adjustment 1.6 --gas-prices 0.025umpwr --chain-id circul^C                                              
root@dc4df2e3dafa:~# empowerd q group proposals-by-group-policy empower13cwsdsetcrhcyd3jeed0mgteg35qaju0q5s0u0drfylagahygwwst8z2la --node https://empower-testnet-rpc.polkachu.com:443
pagination:
  next_key: null
  total: "0"
proposals:
- executor_result: PROPOSAL_EXECUTOR_RESULT_NOT_RUN
  final_tally_result:
    abstain_count: "0"
    no_count: "0"
    no_with_veto_count: "0"
    yes_count: "0"
  group_policy_address: empower13cwsdsetcrhcyd3jeed0mgteg35qaju0q5s0u0drfylagahygwwst8z2la
  group_policy_version: "1"
  group_version: "1"
  id: "17"
  messages:
  - '@type': /cosmwasm.wasm.v1.MsgStoreCode
  proposers:
  - empower175p8jy5fcdkpm3djk40p8ucdn3lyjyd7jtf77w
  status: PROPOSAL_STATUS_SUBMITTED
  submit_time: "2024-01-06T13:55:08.328617803Z"
  summary: Store cw-721
  title: Store cw-721
  voting_period_end: "2024-01-20T13:55:08.328617803Z"
root@dc4df2e3dafa:~# empowerd q group votes-by-proposal 17 --node https://empower-testnet-rpc.polkachu.com:443
pagination:
  next_key: null
  total: "0"
votes:
- metadata: ""
  option: VOTE_OPTION_YES
  proposal_id: "17"
  submit_time: "2024-01-06T14:07:45.319948817Z"
  voter: empower175p8jy5fcdkpm3djk40p8ucdn3lyjyd7jtf77w
root@dc4df2e3dafa:~# empowerd tx group     
Group transaction subcommands

Usage:
  empowerd tx group [flags]
  empowerd tx group [command]

Available Commands:
  create-group                        Create a group which is an aggregation of member accounts with associated weights and an administrator account.
  create-group-policy                 Create a group policy which is an account associated with a group and a decision policy. Note, the '--from' flag is ignored as it is implied from [admin].
  create-group-with-policy            Create a group with policy which is an aggregation of member accounts with associated weights, an administrator account and decision policy.
  draft-proposal                      Generate a draft proposal json file. The generated proposal json contains only one message (skeleton).
  exec                                Execute a proposal
  leave-group                         Remove member from the group
  submit-proposal                     Submit a new proposal
  update-group-admin                  Update a group's admin
  update-group-members                Update a group's members. Set a member's weight to "0" to delete it.
  update-group-metadata               Update a group's metadata
  update-group-policy-admin           Update a group policy admin
  update-group-policy-decision-policy Update a group policy's decision policy
  update-group-policy-metadata        Update a group policy metadata
  vote                                Vote on a proposal
  withdraw-proposal                   Withdraw a submitted proposal

Flags:
  -h, --help   help for group

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

Use "empowerd tx group [command] --help" for more information about a command.
root@dc4df2e3dafa:~# empowerd q group
Querying commands for the group module

Usage:
  empowerd query group [flags]
  empowerd query group [command]

Available Commands:
  group-info                Query for group info by group id
  group-members             Query for group members by group id with pagination flags
  group-policies-by-admin   Query for group policies by admin account address with pagination flags
  group-policies-by-group   Query for group policies by group id with pagination flags
  group-policy-info         Query for group policy info by account address of group policy
  groups                    Query for groups present in the state
  groups-by-admin           Query for groups by admin account address with pagination flags
  groups-by-member          Query for groups by member address with pagination flags
  proposal                  Query for proposal by id
  proposals-by-group-policy Query for proposals by account address of group policy with pagination flags
  tally-result              Query tally result of proposal
  vote                      Query for vote by proposal id and voter account address
  votes-by-proposal         Query for votes by proposal id with pagination flags
  votes-by-voter            Query for votes by voter account address with pagination flags

Flags:
  -h, --help   help for group

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

Use "empowerd query group [command] --help" for more information about a command.
root@dc4df2e3dafa:~# empowerd q group groups
groups: []
pagination:
  next_key: null
  total: "0"
root@dc4df2e3dafa:~# empowerd q group groups --node https://empower-testnet-rpc.polkachu.com:443 
groups:
- admin: empower175p8jy5fcdkpm3djk40p8ucdn3lyjyd7jtf77w
  created_at: "2023-05-31T15:00:00Z"
  id: "1"
  metadata: '{"name": "EmpowerChain Tech deployment"}'
  total_weight: "2"
  version: "1"
- admin: empower10d07y265gmmuvt4z0w9aw880jnsr700jxwhwvd
  created_at: "2023-05-31T15:00:00Z"
  id: "2"
  metadata: '{"name": "EmpowerChain Tech funding"}'
  total_weight: "0"
  version: "1"
- admin: empower10d07y265gmmuvt4z0w9aw880jnsr700jxwhwvd
  created_at: "2023-05-31T15:00:00Z"
  id: "3"
  metadata: '{"name": "Usage incentives"}'
  total_weight: "3"
  version: "1"
- admin: empower10d07y265gmmuvt4z0w9aw880jnsr700jxwhwvd
  created_at: "2023-05-31T15:00:00Z"
  id: "4"
  metadata: '{"name": "EmpowerChain impact and growth"}'
  total_weight: "4"
  version: "2"
- admin: empower175p8jy5fcdkpm3djk40p8ucdn3lyjyd7jtf77w
  created_at: "2023-05-31T15:00:00Z"
  id: "5"
  metadata: '{"name": "Empower"}'
  total_weight: "3"
  version: "1"
- admin: empower175p8jy5fcdkpm3djk40p8ucdn3lyjyd7jtf77w
  created_at: "2023-06-21T12:48:05.127756306Z"
  id: "6"
  metadata: '{"name": "Shan''s dev test"}'
  total_weight: "3"
  version: "1"
pagination:
  next_key: null
  total: "0"
root@dc4df2e3dafa:~# WASM_FILE=/root/cw721_base.wasm
root@dc4df2e3dafa:~# empowerd tx wasm store $WASM_FILE --from empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739 --gas auto --gas-prices 0.025umpwr --gas-adjustment 1.75 --yes --chain-id circulus-1 --node https://empower-testnet-rpc.polkachu.com:443 
Error: key with address empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739 not found: key not found
root@dc4df2e3dafa:~# empowerd tx wasm store $WASM_FILE --from empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw --gas auto --gas-prices 0.025umpwr --gas-adjustment 1.75 --yes --chain-id circulus-1 --node https://empower-testnet-rpc.polkachu.com:443
Enter keyring passphrase (attempt 1/3):
Error: rpc error: code = NotFound desc = rpc error: code = NotFound desc = account empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw not found: key not found
root@dc4df2e3dafa:~# empower keys import
bash: empower: command not found
root@dc4df2e3dafa:~# empowerd keys import
Error: accepts 2 arg(s), received 0
Usage:
  empowerd keys import <name> <keyfile> [flags]

Flags:
  -h, --help   help for import

Global Flags:
      --home string              The application home directory (default "/root/.empowerchain")
      --keyring-backend string   Select keyring's backend (os|file|kwallet|pass|test|memory) (default "os")
      --keyring-dir string       The client Keyring directory; if omitted, the default 'home' directory will be used
      --log_format string        The logging format (json|plain) (default "plain")
      --log_level string         The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --output string            Output format (text|json) (default "text")
      --trace                    print out full stack trace on errors

root@dc4df2e3dafa:~# empowerd keys recover        
Keyring management commands. These keys may be in any format supported by the
Tendermint crypto library and can be used by light-clients, full nodes, or any other application
that needs to sign with a private key.

The keyring supports the following backends:

    os          Uses the operating system's default credentials store.
    file        Uses encrypted file-based keystore within the app's configuration directory.
                This keyring will request a password each time it is accessed, which may occur
                multiple times in a single command resulting in repeated password prompts.
    kwallet     Uses KDE Wallet Manager as a credentials management application.
    pass        Uses the pass command line utility to store and retrieve keys.
    test        Stores keys insecurely to disk. It does not prompt for a password to be unlocked
                and it should be use only for testing purposes.

kwallet and pass backends depend on external tools. Refer to their respective documentation for more
information:
    KWallet     https://github.com/KDE/kwallet
    pass        https://www.passwordstore.org/

The pass backend requires GnuPG: https://gnupg.org/

Usage:
  empowerd keys [command]

Available Commands:
  add            Add an encrypted private key (either newly generated or recovered), encrypt it, and save to <name> file
  delete         Delete the given keys
  export         Export private keys
  import         Import private keys into the local keybase
  import-hex     Import private keys into the local keybase
  list           List all keys
  list-key-types List all key types
  migrate        Migrate keys from amino to proto serialization format
  mnemonic       Compute the bip39 mnemonic for some input entropy
  parse          Parse address from hex to bech32 and vice versa
  rename         Rename an existing key
  show           Retrieve key information by name or address

Flags:
  -h, --help                     help for keys
      --home string              The application home directory (default "/root/.empowerchain")
      --keyring-backend string   Select keyring's backend (os|file|kwallet|pass|test|memory) (default "os")
      --keyring-dir string       The client Keyring directory; if omitted, the default 'home' directory will be used
      --output string            Output format (text|json) (default "text")

Global Flags:
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

Use "empowerd keys [command] --help" for more information about a command.
root@dc4df2e3dafa:~# empower keys add
bash: empower: command not found
root@dc4df2e3dafa:~# empowerd keys add
Error: accepts 1 arg(s), received 0
Usage:
  empowerd keys add <name> [flags]

Flags:
      --account uint32           Account number for HD derivation (less than equal 2147483647)
      --coin-type uint32         coin type number for HD derivation (default 118)
      --dry-run                  Perform action, but don't add key to local keystore
      --hd-path string           Manual HD Path derivation (overrides BIP44 config)
  -h, --help                     help for add
      --index uint32             Address index number for HD derivation (less than equal 2147483647)
  -i, --interactive              Interactively prompt user for BIP39 passphrase and mnemonic
      --key-type string          Key signing algorithm to generate keys for (default "secp256k1")
      --ledger                   Store a local reference to a private key on a Ledger device
      --multisig strings         List of key names stored in keyring to construct a public legacy multisig key
      --multisig-threshold int   K out of N required signatures. For use in conjunction with --multisig (default 1)
      --no-backup                Don't print out seed phrase (if others are watching the terminal)
      --nosort                   Keys passed to --multisig are taken in the order they're supplied
      --pubkey string            Parse a public key in JSON format and saves key info to <name> file.
      --recover                  Provide seed phrase to recover existing key instead of creating

Global Flags:
      --home string              The application home directory (default "/root/.empowerchain")
      --keyring-backend string   Select keyring's backend (os|file|kwallet|pass|test|memory) (default "os")
      --keyring-dir string       The client Keyring directory; if omitted, the default 'home' directory will be used
      --log_format string        The logging format (json|plain) (default "plain")
      --log_level string         The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --output string            Output format (text|json) (default "text")
      --trace                    print out full stack trace on errors

root@dc4df2e3dafa:~# empowerd keys add testnet --recover
> Enter your bip39 mnemonic
wine usage desert yard kidney rotate small olive toast mobile resource faculty
Enter keyring passphrase (attempt 1/3):

- address: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
  name: testnet
  pubkey: '{"@type":"/cosmos.crypto.secp256k1.PubKey","key":"AzoyxEZX66dQQwt8eHJqsMRpMTtOd6Am7EcKbZg0AEBm"}'
  type: local

root@dc4df2e3dafa:~# empowerd bank                      
Error: unknown command "bank" for "empowerd"
Run 'empowerd --help' for usage.
root@dc4df2e3dafa:~# empowerd q bank
Querying commands for the bank module

Usage:
  empowerd query bank [flags]
  empowerd query bank [command]

Available Commands:
  balances           Query for account balances by address
  denom-metadata     Query the client metadata for coin denominations
  send-enabled       Query for send enabled entries
  spendable-balances Query for account spendable balances by address
  total              Query the total supply of coins of the chain

Flags:
  -h, --help   help for bank

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

Use "empowerd query bank [command] --help" for more information about a command.
root@dc4df2e3dafa:~# empowerd q bank balances empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739               
balances: []
pagination:
  next_key: null
  total: "0"
root@dc4df2e3dafa:~# empowerd q bank balances                                               
Error: accepts 1 arg(s), received 0
Usage:
  empowerd query bank balances [address] [flags]

Flags:
      --count-total        count total number of records in all balances to query for
      --denom string       The specific balance denomination to query for
      --grpc-addr string   the gRPC endpoint to use for this chain
      --grpc-insecure      allow gRPC over insecure channels, if not TLS the server must use TLS
      --height int         Use a specific height to query state at (this can error if the node is pruning state)
  -h, --help               help for balances
      --limit uint         pagination limit of all balances to query for (default 100)
      --node string        <host>:<port> to Tendermint RPC interface for this chain (default "tcp://localhost:26657")
      --offset uint        pagination offset of all balances to query for
  -o, --output string      Output format (text|json) (default "text")
      --page uint          pagination page of all balances to query for. This sets offset to a multiple of limit (default 1)
      --page-key string    pagination page-key of all balances to query for
      --reverse            results are sorted in descending order

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

root@dc4df2e3dafa:~# empowerd tx wasm store $WASM_FILE --from empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739 --gas auto --gas-prices 0.025umpwr --gas-adjustment 1.75 --yes --chain-id circulus-1 --node https://empower-testnet-rpc.polkachu.com:443
Enter keyring passphrase (attempt 1/3):
Error: rpc error: code = Unknown desc = rpc error: code = Unknown desc = failed to execute message; message index: 0: can not create code: unauthorized [CosmWasm/wasmd@v0.45.0/x/wasm/keeper/keeper.go:169] With gas wanted: '18446744073709551615' and gas used: '1110032' : unknown request
root@dc4df2e3dafa:~# empowerd tx wasm store $WASM_FILE --from empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw --gas auto --gas-prices 0.025umpwr --gas-adjustment 1.75 --yes --chain-id circulus-1 --node https://empower-testnet-rpc.polkachu.com:443
Enter keyring passphrase (attempt 1/3):
Error: rpc error: code = NotFound desc = rpc error: code = NotFound desc = account empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw not found: key not found
root@dc4df2e3dafa:~# empowerd tx wasm store $WASM_FILE --from empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw --gas auto --gas-prices 0.025umpwr --gas-adjustment 1.75 --yes --chain-id circulus-1 --node https://empower-testnet-rpc.polkachu.com:443
root@dc4df2e3dafa:~# empowerd tx wasm store $WASM_FILE --from empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739 --gas auto --gas-prices 0.025umpwr --gas-adjustment 1.75 --yes --chain-id circulus-1 --node https://empower-testnet-rpc.polkachu.com:443
Enter keyring passphrase (attempt 1/3):
Error: rpc error: code = Unknown desc = rpc error: code = Unknown desc = failed to execute message; message index: 0: can not create code: unauthorized [CosmWasm/wasmd@v0.45.0/x/wasm/keeper/keeper.go:169] With gas wanted: '18446744073709551615' and gas used: '1110032' : unknown request
root@dc4df2e3dafa:~# ASM_FILE=/root/cw721_base.wasm
root@dc4df2e3dafa:~# WASM_FILE=/root/cw721_base.wasm
root@dc4df2e3dafa:~# empowerd tx wasm store $WASM_FILE --from empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739 --gas auto --gas-prices 0.025umpwr --gas-adjustment 1.75 --yes --chain-id circulus-1 --node https://empower-testnet-rpc.polkachu.com:443
Enter keyring passphrase (attempt 1/3):
Error: rpc error: code = Unknown desc = rpc error: code = Unknown desc = failed to execute message; message index: 0: can not create code: unauthorized [CosmWasm/wasmd@v0.45.0/x/wasm/keeper/keeper.go:169] With gas wanted: '18446744073709551615' and gas used: '1110032' : unknown request
root@dc4df2e3dafa:~# empowerd tx wasm instantiate 5 '{"minter": "empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739", "name": "Plastic Credit NFT", "symbol": "PCRD"}' --label nft --admin empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739 --from validator --gas auto --gas-prices 0.025umpwr --gas-adjustment 1.75 --yes --node https://empower-testnet-rpc.polkachu.com:443
Enter keyring passphrase (attempt 1/3):
Error: rpc error: code = NotFound desc = rpc error: code = NotFound desc = account empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw not found: key not found
root@dc4df2e3dafa:~# empowerd tx wasm instantiate 5 '{"minter": "empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739", "name": "Plastic Credit NFT", "symbol": "PCRD"}' --label nft --admin empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739 --from validator --gas auto --gas-prices 0.025umpwr --gas-adjustment 1.75 --yes --node https://empower-testnet-rpc.polkachu.com:443
Enter keyring passphrase (attempt 1/3):
Error: rpc error: code = NotFound desc = rpc error: code = NotFound desc = account empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw not found: key not found
root@dc4df2e3dafa:~# empowerd tx wasm instantiate 5 '{"minter": "empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739", "name": "Plastic Credit NFT", "symbol": "PCRD"}' --label nft --admin empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739 --from empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739 --gas auto --gas-prices 0.025umpwr --gas-adjustment 1.75 --yes --node https://empower-testnet-rpc.polkachu.com:443
Enter keyring passphrase (attempt 1/3):
Error: chain ID required but not specified
root@dc4df2e3dafa:~# empowerd tx wasm instantiate 5 '{"minter": "empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739", "name": "Plastic Credit NFT", "symbol": "PCRD"}' --label nft --admin empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739 --from empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739 --gas auto --gas-prices 0.025umpwr --gas-adjustment 1.75 --yes --chain-id circulus-1 --node https://empower-testnet-rpc.polkachu.com:443
Enter keyring passphrase (attempt 1/3):
gas estimate: 258179
code: 0
codespace: ""
data: ""
events: []
gas_used: "0"
gas_wanted: "0"
height: "0"
info: ""
logs: []
raw_log: '[]'
timestamp: ""
tx: null
txhash: F22F25CC5A9F18C3139235C7015A449A2B60215436F60DCD4C0374E177178F0C
root@dc4df2e3dafa:~# empowerd q tx F22F25CC5A9F18C3139235C7015A449A2B60215436F60DCD4C0374E177178F0C
Error: error in json rpc client, with http response metadata: (Status: 200 OK, Protocol HTTP/1.1). RPC error -32603 - Internal error: tx (F22F25CC5A9F18C3139235C7015A449A2B60215436F60DCD4C0374E177178F0C) not found
Usage:
  empowerd query tx --type=[hash|acc_seq|signature] [hash|acc_seq|signature] [flags]

Flags:
      --grpc-addr string   the gRPC endpoint to use for this chain
      --grpc-insecure      allow gRPC over insecure channels, if not TLS the server must use TLS
      --height int         Use a specific height to query state at (this can error if the node is pruning state)
  -h, --help               help for tx
      --node string        <host>:<port> to Tendermint RPC interface for this chain (default "tcp://localhost:26657")
  -o, --output string      Output format (text|json) (default "text")
      --type string        The type to be used when querying tx, can be one of "hash", "acc_seq", "signature" (default "hash")

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

root@dc4df2e3dafa:~# empowerd q tx F22F25CC5A9F18C3139235C7015A449A2B60215436F60DCD4C0374E177178F0C --node https://empower-testnet-rpc.polkachu.com:443
code: 0
codespace: ""
data: 12780A302F636F736D7761736D2E7761736D2E76312E4D7367496E7374616E7469617465436F6E7472616374526573706F6E736512440A42656D706F7765723165796663636D6A6D363733326B37777034703667646A7768786A7773766A6534346A30686678386E6B67726D3866733776716673363875796877
events:
- attributes:
  - index: true
    key: spender
    value: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
  - index: true
    key: amount
    value: 6455umpwr
  type: coin_spent
- attributes:
  - index: true
    key: receiver
    value: empower17xpfvakm2amg962yls6f84z3kell8c5lv48t3r
  - index: true
    key: amount
    value: 6455umpwr
  type: coin_received
- attributes:
  - index: true
    key: recipient
    value: empower17xpfvakm2amg962yls6f84z3kell8c5lv48t3r
  - index: true
    key: sender
    value: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
  - index: true
    key: amount
    value: 6455umpwr
  type: transfer
- attributes:
  - index: true
    key: sender
    value: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
  type: message
- attributes:
  - index: true
    key: fee
    value: 6455umpwr
  - index: true
    key: fee_payer
    value: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
  type: tx
- attributes:
  - index: true
    key: acc_seq
    value: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739/29
  type: tx
- attributes:
  - index: true
    key: signature
    value: RUoVHQjDyHht5gr8HTl9TMgHAxJLpJ4iCc8aQQTnK5JgZYCciBtn4cQ9Sro1Gbfw0Qmo+lnoIiHQGAroJ6yhCA==
  type: tx
- attributes:
  - index: true
    key: action
    value: /cosmwasm.wasm.v1.MsgInstantiateContract
  - index: true
    key: sender
    value: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
  - index: true
    key: module
    value: wasm
  type: message
- attributes:
  - index: true
    key: _contract_address
    value: empower1eyfccmjm6732k7wp4p6gdjwhxjwsvje44j0hfx8nkgrm8fs7vqfs68uyhw
  - index: true
    key: code_id
    value: "5"
  type: instantiate
gas_used: "165985"
gas_wanted: "258179"
height: "3506446"
info: ""
logs:
- events:
  - attributes:
    - key: action
      value: /cosmwasm.wasm.v1.MsgInstantiateContract
    - key: sender
      value: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
    - key: module
      value: wasm
    type: message
  - attributes:
    - key: _contract_address
      value: empower1eyfccmjm6732k7wp4p6gdjwhxjwsvje44j0hfx8nkgrm8fs7vqfs68uyhw
    - key: code_id
      value: "5"
    type: instantiate
  log: ""
  msg_index: 0
raw_log: '[{"msg_index":0,"events":[{"type":"message","attributes":[{"key":"action","value":"/cosmwasm.wasm.v1.MsgInstantiateContract"},{"key":"sender","value":"empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739"},{"key":"module","value":"wasm"}]},{"type":"instantiate","attributes":[{"key":"_contract_address","value":"empower1eyfccmjm6732k7wp4p6gdjwhxjwsvje44j0hfx8nkgrm8fs7vqfs68uyhw"},{"key":"code_id","value":"5"}]}]}]'
timestamp: "2024-01-06T15:04:41Z"
tx:
  '@type': /cosmos.tx.v1beta1.Tx
  auth_info:
    fee:
      amount:
      - amount: "6455"
        denom: umpwr
      gas_limit: "258179"
      granter: ""
      payer: ""
    signer_infos:
    - mode_info:
        single:
          mode: SIGN_MODE_DIRECT
      public_key:
        '@type': /cosmos.crypto.secp256k1.PubKey
        key: AzoyxEZX66dQQwt8eHJqsMRpMTtOd6Am7EcKbZg0AEBm
      sequence: "29"
    tip: null
  body:
    extension_options: []
    memo: ""
    messages:
    - '@type': /cosmwasm.wasm.v1.MsgInstantiateContract
      admin: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
      code_id: "5"
      funds: []
      label: nft
      msg:
        minter: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
        name: Plastic Credit NFT
        symbol: PCRD
      sender: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
    non_critical_extension_options: []
    timeout_height: "0"
  signatures:
  - RUoVHQjDyHht5gr8HTl9TMgHAxJLpJ4iCc8aQQTnK5JgZYCciBtn4cQ9Sro1Gbfw0Qmo+lnoIiHQGAroJ6yhCA==
txhash: F22F25CC5A9F18C3139235C7015A449A2B60215436F60DCD4C0374E177178F0C
root@dc4df2e3dafa:~# 



















 --chain-id circulus-1 --node https://empower-testnet-rpc.polkachu.com:443




















































































 aquish@vaquish-XPS-15-9500:~$ docker ps
CONTAINER ID   IMAGE                                                 COMMAND                  CREATED          STATUS          PORTS                                                     NAMES
70ef2efc4630   ghcr.io/empowerplastic/empowerchain-devnet:74df5f1a   "/bin/sh -c 'empower…"   25 minutes ago   Up 25 minutes   1317/tcp, 9090/tcp, 26656/tcp, 0.0.0.0:26657->26657/tcp   optimistic_kirch
vaquish@vaquish-XPS-15-9500:~$ docker exec -it 70ef2efc4630 bash
root@70ef2efc4630:/# ls -a
.   .dockerenv	boot  etc  home  lib32	libx32	mnt  proc  run	 srv  tmp  var
..  bin		dev   go   lib	 lib64	media	opt  root  sbin  sys  usr
root@70ef2efc4630:/# cd root
root@70ef2efc4630:~# ls -a
.  ..  .bashrc	.empowerchain  .profile  plastic_credit_wrapper.wasm
root@70ef2efc4630:~# 70ef2efc4630^C
root@70ef2efc4630:~# empowerd tx wasm store ./root/plastic_credit_wrapper.wasm --from=empower13cwsdsetcrhcyd3jeed0mgteg35qaju0q5s0u0drfylagahygwwst8z2la --generate-only --chain-id circulus-1 > storemsg.json
Error: open ./root/plastic_credit_wrapper.wasm: no such file or directory
root@70ef2efc4630:~# empowerd tx wasm store ./plastic_credit_wrapper.wasm --from=empower13cwsdsetcrhcyd3jeed0mgteg35qaju0q5s0u0drfylagahygwwst8z2la --generate-only --chain-id circulus-1 > storemsg.json
root@70ef2efc4630:~# ls -a
.  ..  .bashrc	.empowerchain  .profile  plastic_credit_wrapper.wasm  storemsg.json
root@70ef2efc4630:~# ls -a
.  ..  .bashrc	.empowerchain  .profile  plastic_credit_wrapper.wasm  proposal.json  storemsg.json
root@70ef2efc4630:~# empowerd tx group submit-proposal /proposal.json --from empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739 --gas auto --gas-adjustment 1.6 --gas-prices 0.025umpwr --chain-id circulus-1 --node https://empower-testnet-rpc.polkachu.com:443
Error: open /proposal.json: no such file or directory
Usage:
  empowerd tx group submit-proposal [proposal_json_file] [flags]

Examples:

"empowerd" tx group submit-proposal path/to/proposal.json
	
	Where proposal.json contains:

{
	"group_policy_address": "cosmos1...",
	// array of proto-JSON-encoded sdk.Msgs
	"messages": [
	{
		"@type": "/cosmos.bank.v1beta1.MsgSend",
		"from_address": "cosmos1...",
		"to_address": "cosmos1...",
		"amount":[{"denom": "stake","amount": "10"}]
	}
	],
	// metadata can be any of base64 encoded, raw text, stringified json, IPFS link to json
	// see below for example metadata
	"metadata": "4pIMOgIGx1vZGU=", // base64-encoded metadata
	"title": "My proposal",
	"summary": "This is a proposal to send 10 stake to cosmos1...",
	"proposers": ["cosmos1...", "cosmos1..."],
}

metadata example: 
{
	"title": "",
	"authors": [""],
	"summary": "",
	"details": "", 
	"proposal_forum_url": "",
	"vote_option_context": "",
} 


Flags:
  -a, --account-number uint      The account number of the signing account (offline mode only)
      --aux                      Generate aux signer data instead of sending a tx
  -b, --broadcast-mode string    Transaction broadcasting mode (sync|async) (default "sync")
      --chain-id string          The network chain ID
      --dry-run                  ignore the --gas flag and perform a simulation of a transaction, but don't broadcast it (when enabled, the local Keybase is not accessible)
      --exec string              Set to 1 to try to execute proposal immediately after creation (proposers signatures are considered as Yes votes)
      --fee-granter string       Fee granter grants fees for the transaction
      --fee-payer string         Fee payer pays fees for the transaction instead of deducting from the signer
      --fees string              Fees to pay along with transaction; eg: 10uatom
      --from string              Name or address of private key with which to sign
      --gas string               gas limit to set per-transaction; set to "auto" to calculate sufficient gas automatically. Note: "auto" option doesn't always report accurate results. Set a valid coin value to adjust the result. Can be used instead of "fees". (default 200000)
      --gas-adjustment float     adjustment factor to be multiplied against the estimate returned by the tx simulation; if the gas limit is set manually this flag is ignored  (default 1)
      --gas-prices string        Gas prices in decimal format to determine the transaction fee (e.g. 0.1uatom)
      --generate-only            Build an unsigned transaction and write it to STDOUT (when enabled, the local Keybase only accessed when providing a key name)
  -h, --help                     help for submit-proposal
      --keyring-backend string   Select keyring's backend (os|file|kwallet|pass|test|memory) (default "os")
      --keyring-dir string       The client Keyring directory; if omitted, the default 'home' directory will be used
      --ledger                   Use a connected Ledger device
      --node string              <host>:<port> to tendermint rpc interface for this chain (default "tcp://localhost:26657")
      --note string              Note to add a description to the transaction (previously --memo)
      --offline                  Offline mode (does not allow any online functionality)
  -o, --output string            Output format (text|json) (default "json")
  -s, --sequence uint            The sequence number of the signing account (offline mode only)
      --sign-mode string         Choose sign mode (direct|amino-json|direct-aux), this is an advanced feature
      --timeout-height uint      Set a block timeout height to prevent the tx from being committed past a certain height
      --tip string               Tip is the amount that is going to be transferred to the fee payer on the target chain. This flag is only valid when used with --aux, and is ignored if the target chain didn't enable the TipDecorator
  -y, --yes                      Skip tx broadcasting prompt confirmation

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

root@70ef2efc4630:~# empowerd tx group submit-proposal /root/proposal.json --from empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739 --gas auto --gas-adjustment 1.6 --gas-prices 0.025umpwr --chain-id circulus-1 --node https://empower-testnet-rpc.polkachu.com:443
Error: key with address empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739 not found: key not found
Usage:
  empowerd tx group submit-proposal [proposal_json_file] [flags]

Examples:

"empowerd" tx group submit-proposal path/to/proposal.json
	
	Where proposal.json contains:

{
	"group_policy_address": "cosmos1...",
	// array of proto-JSON-encoded sdk.Msgs
	"messages": [
	{
		"@type": "/cosmos.bank.v1beta1.MsgSend",
		"from_address": "cosmos1...",
		"to_address": "cosmos1...",
		"amount":[{"denom": "stake","amount": "10"}]
	}
	],
	// metadata can be any of base64 encoded, raw text, stringified json, IPFS link to json
	// see below for example metadata
	"metadata": "4pIMOgIGx1vZGU=", // base64-encoded metadata
	"title": "My proposal",
	"summary": "This is a proposal to send 10 stake to cosmos1...",
	"proposers": ["cosmos1...", "cosmos1..."],
}

metadata example: 
{
	"title": "",
	"authors": [""],
	"summary": "",
	"details": "", 
	"proposal_forum_url": "",
	"vote_option_context": "",
} 


Flags:
  -a, --account-number uint      The account number of the signing account (offline mode only)
      --aux                      Generate aux signer data instead of sending a tx
  -b, --broadcast-mode string    Transaction broadcasting mode (sync|async) (default "sync")
      --chain-id string          The network chain ID
      --dry-run                  ignore the --gas flag and perform a simulation of a transaction, but don't broadcast it (when enabled, the local Keybase is not accessible)
      --exec string              Set to 1 to try to execute proposal immediately after creation (proposers signatures are considered as Yes votes)
      --fee-granter string       Fee granter grants fees for the transaction
      --fee-payer string         Fee payer pays fees for the transaction instead of deducting from the signer
      --fees string              Fees to pay along with transaction; eg: 10uatom
      --from string              Name or address of private key with which to sign
      --gas string               gas limit to set per-transaction; set to "auto" to calculate sufficient gas automatically. Note: "auto" option doesn't always report accurate results. Set a valid coin value to adjust the result. Can be used instead of "fees". (default 200000)
      --gas-adjustment float     adjustment factor to be multiplied against the estimate returned by the tx simulation; if the gas limit is set manually this flag is ignored  (default 1)
      --gas-prices string        Gas prices in decimal format to determine the transaction fee (e.g. 0.1uatom)
      --generate-only            Build an unsigned transaction and write it to STDOUT (when enabled, the local Keybase only accessed when providing a key name)
  -h, --help                     help for submit-proposal
      --keyring-backend string   Select keyring's backend (os|file|kwallet|pass|test|memory) (default "os")
      --keyring-dir string       The client Keyring directory; if omitted, the default 'home' directory will be used
      --ledger                   Use a connected Ledger device
      --node string              <host>:<port> to tendermint rpc interface for this chain (default "tcp://localhost:26657")
      --note string              Note to add a description to the transaction (previously --memo)
      --offline                  Offline mode (does not allow any online functionality)
  -o, --output string            Output format (text|json) (default "json")
  -s, --sequence uint            The sequence number of the signing account (offline mode only)
      --sign-mode string         Choose sign mode (direct|amino-json|direct-aux), this is an advanced feature
      --timeout-height uint      Set a block timeout height to prevent the tx from being committed past a certain height
      --tip string               Tip is the amount that is going to be transferred to the fee payer on the target chain. This flag is only valid when used with --aux, and is ignored if the target chain didn't enable the TipDecorator
  -y, --yes                      Skip tx broadcasting prompt confirmation

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

root@70ef2efc4630:~# empowerd keys add testnet --recover
> Enter your bip39 mnemonic
wine usage desert yard kidney rotate small olive toast mobile resource faculty
Enter keyring passphrase (attempt 1/3):

- address: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
  name: testnet
  pubkey: '{"@type":"/cosmos.crypto.secp256k1.PubKey","key":"AzoyxEZX66dQQwt8eHJqsMRpMTtOd6Am7EcKbZg0AEBm"}'
  type: local

root@70ef2efc4630:~# empowerd tx group submit-proposal /root/proposal.json --from empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739 --gas auto --gas-adjustment 1.6 --gas-prices 0.025umpwr --chain-id circulus-1 --node https://empower-testnet-rpc.polkachu.com:443
Enter keyring passphrase (attempt 1/3):
gas estimate: 7589024
auth_info:
  fee:
    amount:
    - amount: "189726"
      denom: umpwr
    gas_limit: "7589024"
    granter: ""
    payer: ""
  signer_infos: []
  tip: null
body:
  extension_options: []
  memo: ""
  messages:
  - '@type': /cosmos.group.v1.MsgSubmitProposal
    exec: EXEC_UNSPECIFIED
    group_policy_address: empower13cwsdsetcrhcyd3jeed0mgteg35qaju0q5s0u0drfylagahygwwst8z2la
    messages:
    - '@type': /cosmwasm.wasm.v1.MsgStoreCode
      instantiate_permission: null
gas estimate: 637203
auth_info:
  fee:
    amount:
    - amount: "15931"
      denom: umpwr
    gas_limit: "637203"
    granter: ""
    payer: ""
  signer_infos: []
  tip: null
body:
  extension_options: []
  memo: ""
  messages:
  - '@type': /cosmos.group.v1.MsgVote
    exec: EXEC_UNSPECIFIED
    metadata: ""
    option: VOTE_OPTION_YES
    proposal_id: "19"
    voter: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
  non_critical_extension_options: []
  timeout_height: "0"
signatures: []
confirm transaction before signing and broadcasting [y/N]: y
code: 0
codespace: ""
data: ""
events: []
gas_used: "0"
gas_wanted: "0"
height: "0"
info: ""
logs: []
raw_log: '[]'
timestamp: ""
tx: null
txhash: 474960D2696CC20065DFF62741CC704322D710CB13205F78B48064A63EFEB18E
root@70ef2efc4630:~# empowerd tx group vote 19 empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739 VOTE_OPTION_YES "" --from empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739 --gas auto --gas-adjustment 1.6 --gas-prices 0.025umpwr --chain-id circulus-1 --node https://empower-testnet-rpc.polkachu.com:443
Enter keyring passphrase (attempt 1/3):
Error: rpc error: code = Unknown desc = rpc error: code = Unknown desc = failed to execute message; message index: 0: store vote: unique constraint violation [cosmos/cosmos-sdk@v0.47.6/x/group/keeper/msg_server.go:665] With gas wanted: '18446744073709551615' and gas used: '385792' : unknown request
Usage:
  empowerd tx group vote [proposal-id] [voter] [vote-option] [metadata] [flags]

Flags:
  -a, --account-number uint      The account number of the signing account (offline mode only)
      --aux                      Generate aux signer data instead of sending a tx
  -b, --broadcast-mode string    Transaction broadcasting mode (sync|async) (default "sync")
      --chain-id string          The network chain ID
      --dry-run                  ignore the --gas flag and perform a simulation of a transaction, but don't broadcast it (when enabled, the local Keybase is not accessible)
      --exec string              Set to 1 to try to execute proposal immediately after voting
      --fee-granter string       Fee granter grants fees for the transaction
      --fee-payer string         Fee payer pays fees for the transaction instead of deducting from the signer
      --fees string              Fees to pay along with transaction; eg: 10uatom
      --from string              Name or address of private key with which to sign
      --gas string               gas limit to set per-transaction; set to "auto" to calculate sufficient gas automatically. Note: "auto" option doesn't always report accurate results. Set a valid coin value to adjust the result. Can be used instead of "fees". (default 200000)
      --gas-adjustment float     adjustment factor to be multiplied against the estimate returned by the tx simulation; if the gas limit is set manually this flag is ignored  (default 1)
      --gas-prices string        Gas prices in decimal format to determine the transaction fee (e.g. 0.1uatom)
      --generate-only            Build an unsigned transaction and write it to STDOUT (when enabled, the local Keybase only accessed when providing a key name)
  -h, --help                     help for vote
      --keyring-backend string   Select keyring's backend (os|file|kwallet|pass|test|memory) (default "os")
      --keyring-dir string       The client Keyring directory; if omitted, the default 'home' directory will be used
      --ledger                   Use a connected Ledger device
      --node string              <host>:<port> to tendermint rpc interface for this chain (default "tcp://localhost:26657")
      --note string              Note to add a description to the transaction (previously --memo)
      --offline                  Offline mode (does not allow any online functionality)
  -o, --output string            Output format (text|json) (default "json")
  -s, --sequence uint            The sequence number of the signing account (offline mode only)
      --sign-mode string         Choose sign mode (direct|amino-json|direct-aux), this is an advanced feature
      --timeout-height uint      Set a block timeout height to prevent the tx from being committed past a certain height
      --tip string               Tip is the amount that is going to be transferred to the fee payer on the target chain. This flag is only valid when used with --aux, and is ignored if the target chain didn't enable the TipDecorator
  -y, --yes                      Skip tx broadcasting prompt confirmation

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

root@70ef2efc4630:~# empowerd q tx 474960D2696CC20065DFF62741CC704322D710CB13205F78B48064A63EFEB18E
Error: error in json rpc client, with http response metadata: (Status: 200 OK, Protocol HTTP/1.1). RPC error -32603 - Internal error: tx (474960D2696CC20065DFF62741CC704322D710CB13205F78B48064A63EFEB18E) not found
Usage:
  empowerd query tx --type=[hash|acc_seq|signature] [hash|acc_seq|signature] [flags]

Flags:
      --grpc-addr string   the gRPC endpoint to use for this chain
      --grpc-insecure      allow gRPC over insecure channels, if not TLS the server must use TLS
      --height int         Use a specific height to query state at (this can error if the node is pruning state)
  -h, --help               help for tx
      --node string        <host>:<port> to Tendermint RPC interface for this chain (default "tcp://localhost:26657")
  -o, --output string      Output format (text|json) (default "text")
      --type string        The type to be used when querying tx, can be one of "hash", "acc_seq", "signature" (default "hash")

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

root@70ef2efc4630:~# empowerd q tx 474960D2696CC20065DFF62741CC704322D710CB13205F78B48064A63EFEB18E --node https://empower-testnet-rpc.polkachu.com:443
code: 0
codespace: ""
data: 12220A202F636F736D6F732E67726F75702E76312E4D7367566F7465526573706F6E7365
events:
- attributes:
  - index: true
    key: spender
    value: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
  - index: true
    key: amount
    value: 15931umpwr
  type: coin_spent
- attributes:
  - index: true
    key: receiver
    value: empower17xpfvakm2amg962yls6f84z3kell8c5lv48t3r
  - index: true
    key: amount
    value: 15931umpwr
  type: coin_received
- attributes:
  - index: true
    key: recipient
    value: empower17xpfvakm2amg962yls6f84z3kell8c5lv48t3r
  - index: true
    key: sender
    value: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
  - index: true
    key: amount
    value: 15931umpwr
  type: transfer
- attributes:
  - index: true
    key: sender
    value: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
  type: message
- attributes:
  - index: true
    key: fee
    value: 15931umpwr
  - index: true
    key: fee_payer
    value: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
  type: tx
- attributes:
  - index: true
    key: acc_seq
    value: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739/36
  type: tx
- attributes:
  - index: true
    key: signature
    value: s5XwLGh80D0Wsrb46DPGAMyALm+wkCq6CO6e/cxu7XgdbwopoZJdq8EXLPtuiQS5wUf4Sr0UX06kUXCPoRDi4g==
  type: tx
- attributes:
  - index: true
    key: action
    value: /cosmos.group.v1.MsgVote
  - index: true
    key: sender
    value: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
  - index: true
    key: module
    value: group
  type: message
- attributes:
  - index: true
    key: proposal_id
    value: '"19"'
  type: cosmos.group.v1.EventVote
gas_used: "416745"
gas_wanted: "637203"
height: "3557344"
info: ""
logs:
- events:
  - attributes:
    - key: action
      value: /cosmos.group.v1.MsgVote
    - key: sender
      value: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
    - key: module
      value: group
    type: message
  - attributes:
    - key: proposal_id
      value: '"19"'
    type: cosmos.group.v1.EventVote
  log: ""
  msg_index: 0
raw_log: '[{"msg_index":0,"events":[{"type":"message","attributes":[{"key":"action","value":"/cosmos.group.v1.MsgVote"},{"key":"sender","value":"empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739"},{"key":"module","value":"group"}]},{"type":"cosmos.group.v1.EventVote","attributes":[{"key":"proposal_id","value":"\"19\""}]}]}]'
timestamp: "2024-01-09T14:51:15Z"
tx:
  '@type': /cosmos.tx.v1beta1.Tx
  auth_info:
    fee:
      amount:
      - amount: "15931"
        denom: umpwr
      gas_limit: "637203"
      granter: ""
      payer: ""
    signer_infos:
    - mode_info:
        single:
          mode: SIGN_MODE_DIRECT
      public_key:
        '@type': /cosmos.crypto.secp256k1.PubKey
        key: AzoyxEZX66dQQwt8eHJqsMRpMTtOd6Am7EcKbZg0AEBm
      sequence: "36"
    tip: null
  body:
    extension_options: []
    memo: ""
    messages:
    - '@type': /cosmos.group.v1.MsgVote
      exec: EXEC_UNSPECIFIED
      metadata: ""
      option: VOTE_OPTION_YES
      proposal_id: "19"
      voter: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
    non_critical_extension_options: []
    timeout_height: "0"
  signatures:
  - s5XwLGh80D0Wsrb46DPGAMyALm+wkCq6CO6e/cxu7XgdbwopoZJdq8EXLPtuiQS5wUf4Sr0UX06kUXCPoRDi4g==
txhash: 474960D2696CC20065DFF62741CC704322D710CB13205F78B48064A63EFEB18E
root@70ef2efc4630:~# empowerd tx group exec 19 --from empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739 --gas auto --gas-adjustment 1.6 --gas-prices 0.025umpwr --chain-id circulus-1 --node https://empower-testnet-rpc.polkachu.com:443
Enter keyring passphrase (attempt 1/3):
gas estimate: 2935104
auth_info:
  fee:
    amount:
    - amount: "73378"
      denom: umpwr
    gas_limit: "2935104"
    granter: ""
    payer: ""
  signer_infos: []
  tip: null
body:
  extension_options: []
  memo: ""
  messages:
  - '@type': /cosmos.group.v1.MsgExec
    executor: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
    proposal_id: "19"
  non_critical_extension_options: []
  timeout_height: "0"
signatures: []
confirm transaction before signing and broadcasting [y/N]: y
code: 0
codespace: ""
data: ""
events: []
gas_used: "0"
gas_wanted: "0"
height: "0"
info: ""
logs: []
raw_log: '[]'
timestamp: ""
tx: null
txhash: DE8C57FAC799291C7F9D9D28A8A0E9007760791352333451C7BB196E8D7EEC4A
root@70ef2efc4630:~# empowerd tx wasm instantiate 1 '{"minter": "empowerd tx wasm instantiate 1 '{"minter": "empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw", "name": "Plastic Credit NFT", "symbol": "PCRD"}' --label nft --admin empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw --from validator --gas auto --gas-prices 0.025umpwr --gas-adjustment 1.75 --yes --chain-id emp-devnet-1c^C "name": "Plastic Credit NFT", "symbol": "PCRD"}' --label nft --admin empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw --from validator --gas auto --gas-prices 0.025umpwr --gas-adjustment 1.75 --yes --chain-id emp-devnet-1
root@70ef2efc4630:~# ^C
root@70ef2efc4630:~# empowerd tx wasm instantiate 6 '{"minter": "empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739", "name": "Plastic Credit NFT", "symbol": "PCRD"}' --label nft --admin empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739 --from validator --gas auto --gas-prices 0.025umpwr --gas-adjustment 1.75 --yes --chain-id circulus-1 --node https://empower-testnet-rpc.polkachu.com:443
Enter keyring passphrase (attempt 1/3):
Error: rpc error: code = NotFound desc = rpc error: code = NotFound desc = account empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw not found: key not found
root@70ef2efc4630:~# empowerd tx wasm instantiate 6 '{"minter": "empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739", "name": "Plastic Credit NFT", "symbol": "PCRD"}' --label nft --admin empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739 --from testnet --gas auto --gas-prices 0.025umpwr --gas-adjustment 1.75 --yes --chain-id circulus-1 --node https://empower-testnet-rpc.polkachu.com:443
Enter keyring passphrase (attempt 1/3):
gas estimate: 258179
code: 0
codespace: ""
data: ""
events: []
gas_used: "0"
gas_wanted: "0"
height: "0"
info: ""
logs: []
raw_log: '[]'
timestamp: ""
tx: null
txhash: 635C8F3D529CC88888B686FAD5598CD495A13AE5D80A7D2217CB21A01F8FDDE8
root@70ef2efc4630:~# empowerd tx wasm execute empower14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9sfg4umu '{"mint":{"token_id": "1", "owner": "empower1qrfe6cx3j59wuc2g4xu3dw3sc8tl6lnfpaswzw", "token_uri": "www.example.com"}}' --from validator --yes --chain-id emp-devnet-1^C
root@70ef2efc4630:~# empowerd q tx 635C8F3D529CC88888B686FAD5598CD495A13AE5D80A7D2217CB21A01F8FDDE8 --node https://empower-testnet-rpc.polkachu.com:443
code: 0
codespace: ""
data: 12780A302F636F736D7761736D2E7761736D2E76312E4D7367496E7374616E7469617465436F6E7472616374526573706F6E736512440A42656D706F77657231707672776D6A7575736E39776833346A3779353230673867756D75793978746C33677670726C6C6A666470776A7533783775637330706B68306E
events:
- attributes:
  - index: true
    key: spender
    value: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
  - index: true
    key: amount
    value: 6455umpwr
  type: coin_spent
- attributes:
  - index: true
    key: receiver
    value: empower17xpfvakm2amg962yls6f84z3kell8c5lv48t3r
  - index: true
    key: amount
    value: 6455umpwr
  type: coin_received
- attributes:
  - index: true
    key: recipient
    value: empower17xpfvakm2amg962yls6f84z3kell8c5lv48t3r
  - index: true
    key: sender
    value: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
  - index: true
    key: amount
    value: 6455umpwr
  type: transfer
- attributes:
  - index: true
    key: sender
    value: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
  type: message
- attributes:
  - index: true
    key: fee
    value: 6455umpwr
  - index: true
    key: fee_payer
    value: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
  type: tx
- attributes:
  - index: true
    key: acc_seq
    value: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739/38
  type: tx
- attributes:
  - index: true
    key: signature
    value: yFX29uXsYqaDEuRgxeMiX+GxHAUUb9Ro+3/9yv1rq/AsFOQWiJhvQ0l+lQPMI9Nz0uVNePOTjVKWUIAUTZ/Mpw==
  type: tx
- attributes:
  - index: true
    key: action
    value: /cosmwasm.wasm.v1.MsgInstantiateContract
  - index: true
    key: sender
    value: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
  - index: true
    key: module
    value: wasm
  type: message
- attributes:
  - index: true
    key: _contract_address
    value: empower1pvrwmjuusn9wh34j7y520g8gumuy9xtl3gvprlljfdpwju3x7ucs0pkh0n
  - index: true
    key: code_id
    value: "6"
  type: instantiate
gas_used: "165985"
gas_wanted: "258179"
height: "3557440"
info: ""
logs:
- events:
  - attributes:
    - key: action
      value: /cosmwasm.wasm.v1.MsgInstantiateContract
    - key: sender
      value: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
    - key: module
      value: wasm
    type: message
  - attributes:
    - key: _contract_address
      value: empower1pvrwmjuusn9wh34j7y520g8gumuy9xtl3gvprlljfdpwju3x7ucs0pkh0n
    - key: code_id
      value: "6"
    type: instantiate
  log: ""
  msg_index: 0
raw_log: '[{"msg_index":0,"events":[{"type":"message","attributes":[{"key":"action","value":"/cosmwasm.wasm.v1.MsgInstantiateContract"},{"key":"sender","value":"empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739"},{"key":"module","value":"wasm"}]},{"type":"instantiate","attributes":[{"key":"_contract_address","value":"empower1pvrwmjuusn9wh34j7y520g8gumuy9xtl3gvprlljfdpwju3x7ucs0pkh0n"},{"key":"code_id","value":"6"}]}]}]'
timestamp: "2024-01-09T14:59:26Z"
tx:
  '@type': /cosmos.tx.v1beta1.Tx
  auth_info:
    fee:
      amount:
      - amount: "6455"
        denom: umpwr
      gas_limit: "258179"
      granter: ""
      payer: ""
    signer_infos:
    - mode_info:
        single:
          mode: SIGN_MODE_DIRECT
      public_key:
        '@type': /cosmos.crypto.secp256k1.PubKey
        key: AzoyxEZX66dQQwt8eHJqsMRpMTtOd6Am7EcKbZg0AEBm
      sequence: "38"
    tip: null
  body:
    extension_options: []
    memo: ""
    messages:
    - '@type': /cosmwasm.wasm.v1.MsgInstantiateContract
      admin: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
      code_id: "6"
      funds: []
      label: nft
      msg:
        minter: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
        name: Plastic Credit NFT
        symbol: PCRD
      sender: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
    non_critical_extension_options: []
    timeout_height: "0"
  signatures:
  - yFX29uXsYqaDEuRgxeMiX+GxHAUUb9Ro+3/9yv1rq/AsFOQWiJhvQ0l+lQPMI9Nz0uVNePOTjVKWUIAUTZ/Mpw==
txhash: 635C8F3D529CC88888B686FAD5598CD495A13AE5D80A7D2217CB21A01F8FDDE8
root@70ef2efc4630:~# empowerd tx wasm execute empower1pvrwmjuusn9wh34j7y520g8gumuy9xtl3gvprlljfdpwju3x7ucs0pkh0n '{"mint":{"token_id": "1", "owner": "empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739", "token_uri": "www.example.com"}}' --from testnet --yes ----chain-id circulus-1 --node https://empower-testnet-rpc.polkachu.com:443
Error: bad flag syntax: ----chain-id
root@70ef2efc4630:~# empowerd tx wasm execute empower1pvrwmjuusn9wh34j7y520g8gumuy9xtl3gvprlljfdpwju3x7ucs0pkh0n '{"mint":{"token_id": "1", "owner": "empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739", "token_uri": "www.example.com"}}' --from testnet --yes --chain-id circulus-1 --node https://empower-testnet-rpc.polkachu.com:443
Enter keyring passphrase (attempt 1/3):
code: 0
codespace: ""
data: ""
events: []
gas_used: "0"
gas_wanted: "0"
height: "0"
info: ""
logs: []
raw_log: '[]'
timestamp: ""
tx: null
txhash: 4A0FC92C3DF274467BE7BC0BDC27AD7350CE1EED4B07C281C3A89E1CD7D50F66
root@70ef2efc4630:~# empowerd q tx 4A0FC92C3DF274467BE7BC0BDC27AD7350CE1EED4B07C281C3A89E1CD7D50F66 --node https://empower-testnet-rpc.polkachu.com:443
code: 5
codespace: wasm
data: ""
events:
- attributes:
  - index: true
    key: fee
    value: ""
  - index: true
    key: fee_payer
    value: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
  type: tx
- attributes:
  - index: true
    key: acc_seq
    value: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739/39
  type: tx
- attributes:
  - index: true
    key: signature
    value: bIL648H+eL2otY2ersUu+yG4Hv0kyNr8JS4NXosrFg9nvmIlVYn7bTVEA5k5jLpFObrJ0WYKYYGgQEEmX6JN+Q==
  type: tx
gas_used: "94377"
gas_wanted: "200000"
height: "3557484"
info: ""
logs: []
raw_log: 'failed to execute message; message index: 0: Error parsing into type plastic_credit_wrapper::msg::ExecuteMsg<core::option::Option<cosmwasm_std::results::empty::Empty>,
  cosmwasm_std::results::empty::Empty>: missing field `from`: execute wasm contract
  failed'
timestamp: "2024-01-09T15:03:11Z"
tx:
  '@type': /cosmos.tx.v1beta1.Tx
  auth_info:
    fee:
      amount: []
      gas_limit: "200000"
      granter: ""
      payer: ""
    signer_infos:
    - mode_info:
        single:
          mode: SIGN_MODE_DIRECT
      public_key:
        '@type': /cosmos.crypto.secp256k1.PubKey
        key: AzoyxEZX66dQQwt8eHJqsMRpMTtOd6Am7EcKbZg0AEBm
      sequence: "39"
    tip: null
  body:
    extension_options: []
    memo: ""
    messages:
    - '@type': /cosmwasm.wasm.v1.MsgExecuteContract
      contract: empower1pvrwmjuusn9wh34j7y520g8gumuy9xtl3gvprlljfdpwju3x7ucs0pkh0n
      funds: []
      msg:
        mint:
          owner: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
          token_id: "1"
          token_uri: www.example.com
      sender: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
    non_critical_extension_options: []
    timeout_height: "0"
  signatures:
  - bIL648H+eL2otY2ersUu+yG4Hv0kyNr8JS4NXosrFg9nvmIlVYn7bTVEA5k5jLpFObrJ0WYKYYGgQEEmX6JN+Q==
txhash: 4A0FC92C3DF274467BE7BC0BDC27AD7350CE1EED4B07C281C3A89E1CD7D50F66
root@70ef2efc4630:~# empowerd tx wasm execute empower1pvrwmjuusn9wh34j7y520g8gumuy9xtl3gvprlljfdpwju3x7ucs0pkh0n '{"mint":{"token_id": "1", "owner": "empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739", "token_uri": "www.example.com", "from": "Alex", "denom": "PCRD/1"}, "amount": 64}' --from testnet --yes --chain-id circulus-1 --node https://empower-testnet-rpc.polkachu.com:443
Enter keyring passphrase (attempt 1/3):
code: 0
codespace: ""
data: ""
events: []
gas_used: "0"
gas_wanted: "0"
height: "0"
info: ""
logs: []
raw_log: '[]'
timestamp: ""
tx: null
txhash: 0E6AE922BDC97F3CCDF7A64C9BC5023597FFB79940B6FF15F5C4179E3C7F8A4A
root@70ef2efc4630:~# empowerd q tx 0E6AE922BDC97F3CCDF7A64C9BC5023597FFB79940B6FF15F5C4179E3C7F8A4A --node https://empower-testnet-rpc.polkachu.com:443
code: 5
codespace: wasm
data: ""
events:
- attributes:
  - index: true
    key: fee
    value: ""
  - index: true
    key: fee_payer
    value: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
  type: tx
- attributes:
  - index: true
    key: acc_seq
    value: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739/40
  type: tx
- attributes:
  - index: true
    key: signature
    value: PdMH5B34nrNWmZpHS3B5Ztt0Jssr0YULuNa4BQxhnMYgzJPPJPAN0zfPY7WOT1+GV42qYXJ+K+dIaBimtlWqpA==
  type: tx
gas_used: "94884"
gas_wanted: "200000"
height: "3557505"
info: ""
logs: []
raw_log: 'failed to execute message; message index: 0: Error parsing into type plastic_credit_wrapper::msg::ExecuteMsg<core::option::Option<cosmwasm_std::results::empty::Empty>,
  cosmwasm_std::results::empty::Empty>: missing field `amount`: execute wasm contract
  failed'
timestamp: "2024-01-09T15:04:58Z"
tx:
  '@type': /cosmos.tx.v1beta1.Tx
  auth_info:
    fee:
      amount: []
      gas_limit: "200000"
      granter: ""
      payer: ""
    signer_infos:
    - mode_info:
        single:
          mode: SIGN_MODE_DIRECT
      public_key:
        '@type': /cosmos.crypto.secp256k1.PubKey
        key: AzoyxEZX66dQQwt8eHJqsMRpMTtOd6Am7EcKbZg0AEBm
      sequence: "40"
    tip: null
  body:
    extension_options: []
    memo: ""
    messages:
    - '@type': /cosmwasm.wasm.v1.MsgExecuteContract
      contract: empower1pvrwmjuusn9wh34j7y520g8gumuy9xtl3gvprlljfdpwju3x7ucs0pkh0n
      funds: []
      msg:
        amount: 64
        mint:
          denom: PCRD/1
          from: Alex
          owner: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
          token_id: "1"
          token_uri: www.example.com
      sender: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
    non_critical_extension_options: []
    timeout_height: "0"
  signatures:
  - PdMH5B34nrNWmZpHS3B5Ztt0Jssr0YULuNa4BQxhnMYgzJPPJPAN0zfPY7WOT1+GV42qYXJ+K+dIaBimtlWqpA==
txhash: 0E6AE922BDC97F3CCDF7A64C9BC5023597FFB79940B6FF15F5C4179E3C7F8A4A
root@70ef2efc4630:~# empowerd tx wasm execute empower1pvrwmjuusn9wh34j7y520g8gumuy9xtl3gvprlljfdpwju3x7ucs0pkh0n '{"mint":{"token_id": "1", "owner": "empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739", "token_uri": "www.example.com", "from": "Alex", "denom": "PCRD/1", "amount": 64}}' --from testnet --yes --chain-id circulus-1 --node https://empower-testnet-rpc.polkachu.com:443
Enter keyring passphrase (attempt 1/3):
code: 0
codespace: ""
data: ""
events: []
gas_used: "0"
gas_wanted: "0"
height: "0"
info: ""
logs: []
raw_log: '[]'
timestamp: ""
tx: null
txhash: E20BF395CB47F9D6860B6C68E9D8169702D6C03E052CCB19A010AC4252B462B9
root@70ef2efc4630:~# empowerd q tx E20BF395CB47F9D6860B6C68E9D8169702D6C03E052CCB19A010AC4252B462B9 --node https://empower-testnet-rpc.polkachu.com:443
code: 0
codespace: ""
data: 122E0A2C2F636F736D7761736D2E7761736D2E76312E4D736745786563757465436F6E7472616374526573706F6E7365
events:
- attributes:
  - index: true
    key: fee
    value: ""
  - index: true
    key: fee_payer
    value: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
  type: tx
- attributes:
  - index: true
    key: acc_seq
    value: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739/41
  type: tx
- attributes:
  - index: true
    key: signature
    value: YoKUmdG5VPHvNYrPfOYpapJNBtNQLHVkLsvih8bj/wBRl7Y3CrtjXT++vYwcFFVmoi7wfo7TURsN1R2uhAzOdA==
  type: tx
- attributes:
  - index: true
    key: action
    value: /cosmwasm.wasm.v1.MsgExecuteContract
  - index: true
    key: sender
    value: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
  - index: true
    key: module
    value: wasm
  type: message
- attributes:
  - index: true
    key: _contract_address
    value: empower1pvrwmjuusn9wh34j7y520g8gumuy9xtl3gvprlljfdpwju3x7ucs0pkh0n
  type: execute
- attributes:
  - index: true
    key: _contract_address
    value: empower1pvrwmjuusn9wh34j7y520g8gumuy9xtl3gvprlljfdpwju3x7ucs0pkh0n
  - index: true
    key: action
    value: mint
  - index: true
    key: minter
    value: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
  - index: true
    key: owner
    value: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
  - index: true
    key: token_id
    value: "1"
  type: wasm
gas_used: "119589"
gas_wanted: "200000"
height: "3557524"
info: ""
logs:
- events:
  - attributes:
    - key: action
      value: /cosmwasm.wasm.v1.MsgExecuteContract
    - key: sender
      value: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
    - key: module
      value: wasm
    type: message
  - attributes:
    - key: _contract_address
      value: empower1pvrwmjuusn9wh34j7y520g8gumuy9xtl3gvprlljfdpwju3x7ucs0pkh0n
    type: execute
  - attributes:
    - key: _contract_address
      value: empower1pvrwmjuusn9wh34j7y520g8gumuy9xtl3gvprlljfdpwju3x7ucs0pkh0n
    - key: action
      value: mint
    - key: minter
      value: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
    - key: owner
      value: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
    - key: token_id
      value: "1"
    type: wasm
  log: ""
  msg_index: 0
raw_log: '[{"msg_index":0,"events":[{"type":"message","attributes":[{"key":"action","value":"/cosmwasm.wasm.v1.MsgExecuteContract"},{"key":"sender","value":"empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739"},{"key":"module","value":"wasm"}]},{"type":"execute","attributes":[{"key":"_contract_address","value":"empower1pvrwmjuusn9wh34j7y520g8gumuy9xtl3gvprlljfdpwju3x7ucs0pkh0n"}]},{"type":"wasm","attributes":[{"key":"_contract_address","value":"empower1pvrwmjuusn9wh34j7y520g8gumuy9xtl3gvprlljfdpwju3x7ucs0pkh0n"},{"key":"action","value":"mint"},{"key":"minter","value":"empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739"},{"key":"owner","value":"empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739"},{"key":"token_id","value":"1"}]}]}]'
timestamp: "2024-01-09T15:06:34Z"
tx:
  '@type': /cosmos.tx.v1beta1.Tx
  auth_info:
    fee:
      amount: []
      gas_limit: "200000"
      granter: ""
      payer: ""
    signer_infos:
    - mode_info:
        single:
          mode: SIGN_MODE_DIRECT
      public_key:
        '@type': /cosmos.crypto.secp256k1.PubKey
        key: AzoyxEZX66dQQwt8eHJqsMRpMTtOd6Am7EcKbZg0AEBm
      sequence: "41"
    tip: null
  body:
    extension_options: []
    memo: ""
    messages:
    - '@type': /cosmwasm.wasm.v1.MsgExecuteContract
      contract: empower1pvrwmjuusn9wh34j7y520g8gumuy9xtl3gvprlljfdpwju3x7ucs0pkh0n
      funds: []
      msg:
        mint:
          amount: 64
          denom: PCRD/1
          from: Alex
          owner: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
          token_id: "1"
          token_uri: www.example.com
      sender: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
    non_critical_extension_options: []
    timeout_height: "0"
  signatures:
  - YoKUmdG5VPHvNYrPfOYpapJNBtNQLHVkLsvih8bj/wBRl7Y3CrtjXT++vYwcFFVmoi7wfo7TURsN1R2uhAzOdA==
txhash: E20BF395CB47F9D6860B6C68E9D8169702D6C03E052CCB19A010AC4252B462B9
root@70ef2efc4630:~# empowerd q wasm contract-state smart empower1pvrwmjuusn9wh34j7y520g8gumuy9xtl3gvprlljfdpwju3x7ucs0pkh0n '{"nft_info":{"token_id": "1"}}' --chain-id circulus-1 --node https://empower-testnet-rpc.polkachu.com:443
Error: unknown flag: --chain-id
root@70ef2efc4630:~# empowerd q wasm contract-state smart empower1pvrwmjuusn9wh34j7y520g8gumuy9xtl3gvprlljfdpwju3x7ucs0pkh0n '{"nft_info":{"token_id": "1"}}' --node https://empower-testnet-rpc.polkachu.com:443
data:
  extension: null
  token_uri: www.example.com
root@70ef2efc4630:~# empowerd q pc
Querying commands for the plasticcredit module

Usage:
  empowerd query plasticcredit [flags]
  empowerd query plasticcredit [command]

Aliases:
  plasticcredit, pc

Available Commands:
  applicant         query for an applicant by its [applicant-id]
  credit-balance    Query credit balance by address and denom
  credit-collection Query credit collection by it's denom
  credit-type       query for a credit type by its [abbreviation]
  credit-types      query all credit types
  issuer            query for an issuer by its [issuer-id]
  issuers           query all issuers
  params            shows the parameters of the module
  project           Query project by project-id

Flags:
  -h, --help   help for plasticcredit

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

Use "empowerd query plasticcredit [command] --help" for more information about a command.
root@70ef2efc4630:~# empowerd q pc credit-balance empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739 --node https://empower-testnet-rpc.polkachu.com:443
Error: accepts 2 arg(s), received 1
Usage:
  empowerd query plasticcredit credit-balance [address] [denom] [flags]

Flags:
      --grpc-addr string   the gRPC endpoint to use for this chain
      --grpc-insecure      allow gRPC over insecure channels, if not TLS the server must use TLS
      --height int         Use a specific height to query state at (this can error if the node is pruning state)
  -h, --help               help for credit-balance
      --node string        <host>:<port> to Tendermint RPC interface for this chain (default "tcp://localhost:26657")
  -o, --output string      Output format (text|json) (default "text")

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

root@70ef2efc4630:~# empowerd q pc credit-balance empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739 PCRD/00710LPVHVM3WGX000000115 --node https://empower-testnet-rpc.polkachu.com:443
balance:
  balance:
    active: "0"
    retired: "2"
  denom: PCRD/00710LPVHVM3WGX000000115
  owner: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
root@70ef2efc4630:~# empowerd q pc credit-balance empower19247whxe6etzfdj3l6ye6hwfa3glys3pkdjp4x PCRD/00710LPVHVM3WGX000000115 --node https://empower-testnet-rpc.polkachu.com:443
Error: rpc error: code = Unknown desc = balance for address empower19247whxe6etzfdj3l6ye6hwfa3glys3pkdjp4x and denom PCRD/00710LPVHVM3WGX000000115 not found: credit balance not found: unknown request
Usage:
  empowerd query plasticcredit credit-balance [address] [denom] [flags]

Flags:
      --grpc-addr string   the gRPC endpoint to use for this chain
      --grpc-insecure      allow gRPC over insecure channels, if not TLS the server must use TLS
      --height int         Use a specific height to query state at (this can error if the node is pruning state)
  -h, --help               help for credit-balance
      --node string        <host>:<port> to Tendermint RPC interface for this chain (default "tcp://localhost:26657")
  -o, --output string      Output format (text|json) (default "text")

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

root@70ef2efc4630:~# empowerd q pc credit-balance empower1pvrwmjuusn9wh34j7y520g8gumuy9xtl3gvprlljfdpwju3x7ucs0pkh0n PCRD/00710LPVHVM3WGX000000115 --node https://empower-testnet-rpc.polkachu.com:443
Error: rpc error: code = Unknown desc = balance for address empower1pvrwmjuusn9wh34j7y520g8gumuy9xtl3gvprlljfdpwju3x7ucs0pkh0n and denom PCRD/00710LPVHVM3WGX000000115 not found: credit balance not found: unknown request
Usage:
  empowerd query plasticcredit credit-balance [address] [denom] [flags]

Flags:
      --grpc-addr string   the gRPC endpoint to use for this chain
      --grpc-insecure      allow gRPC over insecure channels, if not TLS the server must use TLS
      --height int         Use a specific height to query state at (this can error if the node is pruning state)
  -h, --help               help for credit-balance
      --node string        <host>:<port> to Tendermint RPC interface for this chain (default "tcp://localhost:26657")
  -o, --output string      Output format (text|json) (default "text")

Global Flags:
      --home string         directory for config and data (default "/root/.empowerchain")
      --log_format string   The logging format (json|plain) (default "plain")
      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")
      --trace               print out full stack trace on errors

root@70ef2efc4630:~# empowerd q pc credit-balance empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739 PCRD/00710LPVHVM3WGX000000115 --node https://empower-testnet-rpc.polkachu.com:443
balance:
  balance:
    active: "0"
    retired: "2"
  denom: PCRD/00710LPVHVM3WGX000000115
  owner: empower1y2cc50x64vslpqsmz8x2tcj8h3w0l6mpx87739
